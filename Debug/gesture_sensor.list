
gesture_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e8  080065e8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f0  080065f0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065f4  080065f4  000075f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20040000  080065f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20040068  08006660  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040310  08006660  00008310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015da9  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a0  00000000  00000000  0001de41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000206e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f24  00000000  00000000  00021a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b95b  00000000  00000000  0002294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cbe  00000000  00000000  0004e2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c639  00000000  00000000  00065f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017259e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e0  00000000  00000000  001725e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00177fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040068 	.word	0x20040068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080064c8 	.word	0x080064c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004006c 	.word	0x2004006c
 80001fc:	080064c8 	.word	0x080064c8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_GPIO_EXTI_Callback>:
#define DRE_ADDR 0x01
#define GEST_ADDR 0x04
#define SAD_W_M 0x20
#define SAD_R_M 0x21

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2] = {0x00};
 800059a:	2300      	movs	r3, #0
 800059c:	813b      	strh	r3, [r7, #8]
	//read the status register to properly clear the interrupt
	int ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf[0], 1, 1000);
 800059e:	f107 0208 	add.w	r2, r7, #8
 80005a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	483a      	ldr	r0, [pc, #232]	@ (8000698 <HAL_GPIO_EXTI_Callback+0x108>)
 80005ae:	f001 fa97 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	613b      	str	r3, [r7, #16]

	ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf[0], 1, 1000);
 80005b6:	f107 0208 	add.w	r2, r7, #8
 80005ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2121      	movs	r1, #33	@ 0x21
 80005c4:	4834      	ldr	r0, [pc, #208]	@ (8000698 <HAL_GPIO_EXTI_Callback+0x108>)
 80005c6:	f001 fba3 	bl	8001d10 <HAL_I2C_Master_Receive>
 80005ca:	4603      	mov	r3, r0
 80005cc:	613b      	str	r3, [r7, #16]

	if (ret == HAL_OK) {
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d105      	bne.n	80005e0 <HAL_GPIO_EXTI_Callback+0x50>
		printf("Status 0x%02X\n\r", buf[0]);
 80005d4:	7a3b      	ldrb	r3, [r7, #8]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4830      	ldr	r0, [pc, #192]	@ (800069c <HAL_GPIO_EXTI_Callback+0x10c>)
 80005da:	f005 f907 	bl	80057ec <iprintf>
 80005de:	e002      	b.n	80005e6 <HAL_GPIO_EXTI_Callback+0x56>
	} else {
		printf("I2C Read Error\n\r");
 80005e0:	482f      	ldr	r0, [pc, #188]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0x110>)
 80005e2:	f005 f903 	bl	80057ec <iprintf>
	}

	// check to see if the status is giving a swipe gesture, if its not then don't spend the time to read it
	int should_read = buf[0] >> 2 & 1;
 80005e6:	7a3b      	ldrb	r3, [r7, #8]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	int gesture;
	if(should_read)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d028      	beq.n	800064a <HAL_GPIO_EXTI_Callback+0xba>
	{
		buf[0]= 0x04;
 80005f8:	2304      	movs	r3, #4
 80005fa:	723b      	strb	r3, [r7, #8]

		ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf[0], 1, 1000);
 80005fc:	f107 0208 	add.w	r2, r7, #8
 8000600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	2120      	movs	r1, #32
 800060a:	4823      	ldr	r0, [pc, #140]	@ (8000698 <HAL_GPIO_EXTI_Callback+0x108>)
 800060c:	f001 fa68 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 8000610:	4603      	mov	r3, r0
 8000612:	613b      	str	r3, [r7, #16]
		if (ret != HAL_OK) {
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <HAL_GPIO_EXTI_Callback+0x90>
			printf("transmit error\n\r");
 800061a:	4822      	ldr	r0, [pc, #136]	@ (80006a4 <HAL_GPIO_EXTI_Callback+0x114>)
 800061c:	f005 f8e6 	bl	80057ec <iprintf>
		}

		ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf[0], 1, 1000);
 8000620:	f107 0208 	add.w	r2, r7, #8
 8000624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	2121      	movs	r1, #33	@ 0x21
 800062e:	481a      	ldr	r0, [pc, #104]	@ (8000698 <HAL_GPIO_EXTI_Callback+0x108>)
 8000630:	f001 fb6e 	bl	8001d10 <HAL_I2C_Master_Receive>
 8000634:	4603      	mov	r3, r0
 8000636:	613b      	str	r3, [r7, #16]

		// 0x01 is a Left Swipe, 0x02 is a Right Swipe
		if (ret == HAL_OK) {
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d102      	bne.n	8000644 <HAL_GPIO_EXTI_Callback+0xb4>
			gesture = buf[0];
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e002      	b.n	800064a <HAL_GPIO_EXTI_Callback+0xba>
		} else {
			printf("I2C Read Error\n\r");
 8000644:	4816      	ldr	r0, [pc, #88]	@ (80006a0 <HAL_GPIO_EXTI_Callback+0x110>)
 8000646:	f005 f8d1 	bl	80057ec <iprintf>
		}
	}

	if(gesture == 0x01 && curr_action == SwipeLeft)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10b      	bne.n	8000668 <HAL_GPIO_EXTI_Callback+0xd8>
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d107      	bne.n	8000668 <HAL_GPIO_EXTI_Callback+0xd8>
	{
		printf("Success! \n\r");
 8000658:	4814      	ldr	r0, [pc, #80]	@ (80006ac <HAL_GPIO_EXTI_Callback+0x11c>)
 800065a:	f005 f8c7 	bl	80057ec <iprintf>
		TIM2->CNT = 0;
 800065e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
 8000666:	e012      	b.n	800068e <HAL_GPIO_EXTI_Callback+0xfe>
	}
	else if(gesture == 0x02 && curr_action == SwipeRight)
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d10b      	bne.n	8000686 <HAL_GPIO_EXTI_Callback+0xf6>
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d107      	bne.n	8000686 <HAL_GPIO_EXTI_Callback+0xf6>
	{
		printf("Success! \n\r");
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <HAL_GPIO_EXTI_Callback+0x11c>)
 8000678:	f005 f8b8 	bl	80057ec <iprintf>
		TIM2->CNT = 0;
 800067c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	@ 0x24
 8000684:	e003      	b.n	800068e <HAL_GPIO_EXTI_Callback+0xfe>
	}
	else
	{
		game_status = Fail;
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <HAL_GPIO_EXTI_Callback+0x120>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20040084 	.word	0x20040084
 800069c:	080064e0 	.word	0x080064e0
 80006a0:	080064f0 	.word	0x080064f0
 80006a4:	08006504 	.word	0x08006504
 80006a8:	200401b9 	.word	0x200401b9
 80006ac:	08006518 	.word	0x08006518
 80006b0:	200401b8 	.word	0x200401b8

080006b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	game_status = Fail;
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	200401b8 	.word	0x200401b8

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fe34 	bl	8001346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f84d 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f96b 	bl	80009bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e6:	f000 f88f 	bl	8000808 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80006ea:	f000 f8cd 	bl	8000888 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80006ee:	f000 f917 	bl	8000920 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //set interrupt to only interrupt when a swipe gesture is detected
    uint8_t buf[10]= {0x01, 0x04};
 80006f2:	f240 4301 	movw	r3, #1025	@ 0x401
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	809a      	strh	r2, [r3, #4]
    int ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf[0], 2, 1000);
 8000700:	463a      	mov	r2, r7
 8000702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2302      	movs	r3, #2
 800070a:	2120      	movs	r1, #32
 800070c:	4815      	ldr	r0, [pc, #84]	@ (8000764 <main+0x90>)
 800070e:	f001 f9e7 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 8000712:	4603      	mov	r3, r0
 8000714:	60fb      	str	r3, [r7, #12]
    ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf[0], 1, 1000);
 8000716:	463a      	mov	r2, r7
 8000718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2121      	movs	r1, #33	@ 0x21
 8000722:	4810      	ldr	r0, [pc, #64]	@ (8000764 <main+0x90>)
 8000724:	f001 faf4 	bl	8001d10 <HAL_I2C_Master_Receive>
 8000728:	4603      	mov	r3, r0
 800072a:	60fb      	str	r3, [r7, #12]

    //timer stuff woohoo
    HAL_TIM_Base_Start_IT(&htim2); //Starts timer 2
 800072c:	480e      	ldr	r0, [pc, #56]	@ (8000768 <main+0x94>)
 800072e:	f003 fc3f 	bl	8003fb0 <HAL_TIM_Base_Start_IT>
    game_status = Good;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <main+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
    curr_action = SwipeRight;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <main+0x9c>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if(game_status == Good)
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <main+0x98>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d107      	bne.n	8000756 <main+0x82>
	  {
		  printf("count: %d \n\r", TIM2->CNT);
 8000746:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800074a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074c:	4619      	mov	r1, r3
 800074e:	4809      	ldr	r0, [pc, #36]	@ (8000774 <main+0xa0>)
 8000750:	f005 f84c 	bl	80057ec <iprintf>
 8000754:	e7f3      	b.n	800073e <main+0x6a>
	  }
	  else
	  {
		  printf("womp womp \n\r");
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <main+0xa4>)
 8000758:	f005 f848 	bl	80057ec <iprintf>
		  exit(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f004 ff71 	bl	8005644 <exit>
 8000762:	bf00      	nop
 8000764:	20040084 	.word	0x20040084
 8000768:	2004016c 	.word	0x2004016c
 800076c:	200401b8 	.word	0x200401b8
 8000770:	200401b9 	.word	0x200401b9
 8000774:	08006524 	.word	0x08006524
 8000778:	08006534 	.word	0x08006534

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	@ 0x58
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2244      	movs	r2, #68	@ 0x44
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 f883 	bl	8005896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007a2:	f001 ff09 	bl	80025b8 <HAL_PWREx_ControlVoltageScaling>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ac:	f000 fb40 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b0:	2310      	movs	r3, #16
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007bc:	2360      	movs	r3, #96	@ 0x60
 80007be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ffa9 	bl	8002720 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007d4:	f000 fb2c 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fbaf 	bl	8002f54 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007fc:	f000 fb18 	bl	8000e30 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3758      	adds	r7, #88	@ 0x58
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <MX_I2C1_Init+0x74>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	@ (8000880 <MX_I2C1_Init+0x78>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000812:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_I2C1_Init+0x74>)
 8000814:	4a1b      	ldr	r2, [pc, #108]	@ (8000884 <MX_I2C1_Init+0x7c>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_I2C1_Init+0x74>)
 8000820:	2201      	movs	r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <MX_I2C1_Init+0x74>)
 8000844:	f001 f8b0 	bl	80019a8 <HAL_I2C_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084e:	f000 faef 	bl	8000e30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4809      	ldr	r0, [pc, #36]	@ (800087c <MX_I2C1_Init+0x74>)
 8000856:	f001 fdf7 	bl	8002448 <HAL_I2CEx_ConfigAnalogFilter>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 fae6 	bl	8000e30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_I2C1_Init+0x74>)
 8000868:	f001 fe39 	bl	80024de <HAL_I2CEx_ConfigDigitalFilter>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 fadd 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20040084 	.word	0x20040084
 8000880:	40005400 	.word	0x40005400
 8000884:	00100d14 	.word	0x00100d14

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_LPUART1_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008d2:	f003 ffbb 	bl	800484c <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 faa8 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008e4:	f004 fde4 	bl	80054b0 <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 fa9f 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 80008f6:	f004 fe19 	bl	800552c <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 fa96 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_LPUART1_UART_Init+0x90>)
 8000906:	f004 fd9a 	bl	800543e <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 fa8e 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200400d8 	.word	0x200400d8
 800091c:	40008000 	.word	0x40008000

08000920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000948:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000956:	f241 3287 	movw	r2, #4999	@ 0x1387
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_TIM2_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <MX_TIM2_Init+0x98>)
 800096a:	f003 fac9 	bl	8003f00 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 fa5c 	bl	8000e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000986:	f003 fc8a 	bl	800429e <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000990:	f000 fa4e 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_TIM2_Init+0x98>)
 80009a2:	f003 fead 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80009ac:	f000 fa40 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2004016c 	.word	0x2004016c

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	@ 0x38
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	4bb1      	ldr	r3, [pc, #708]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4ab0      	ldr	r2, [pc, #704]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4bae      	ldr	r3, [pc, #696]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	623b      	str	r3, [r7, #32]
 80009e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4bab      	ldr	r3, [pc, #684]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4aaa      	ldr	r2, [pc, #680]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4ba8      	ldr	r3, [pc, #672]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a02:	4ba5      	ldr	r3, [pc, #660]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4aa4      	ldr	r2, [pc, #656]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4ba2      	ldr	r3, [pc, #648]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a9e      	ldr	r2, [pc, #632]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b9c      	ldr	r3, [pc, #624]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b99      	ldr	r3, [pc, #612]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	4a98      	ldr	r2, [pc, #608]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3e:	4b96      	ldr	r3, [pc, #600]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b93      	ldr	r3, [pc, #588]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a92      	ldr	r2, [pc, #584]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b90      	ldr	r3, [pc, #576]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b8d      	ldr	r3, [pc, #564]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a8c      	ldr	r2, [pc, #560]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b8a      	ldr	r3, [pc, #552]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b87      	ldr	r3, [pc, #540]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a86      	ldr	r2, [pc, #536]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b84      	ldr	r3, [pc, #528]	@ (8000c98 <MX_GPIO_Init+0x2dc>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a92:	f001 fe35 	bl	8002700 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a96:	230c      	movs	r3, #12
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000aa6:	230d      	movs	r3, #13
 8000aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	487a      	ldr	r0, [pc, #488]	@ (8000c9c <MX_GPIO_Init+0x2e0>)
 8000ab2:	f000 fdcf 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aba:	2312      	movs	r3, #18
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4873      	ldr	r0, [pc, #460]	@ (8000ca0 <MX_GPIO_Init+0x2e4>)
 8000ad2:	f000 fdbf 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ae6:	230d      	movs	r3, #13
 8000ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	486b      	ldr	r0, [pc, #428]	@ (8000ca0 <MX_GPIO_Init+0x2e4>)
 8000af2:	f000 fdaf 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000af6:	233f      	movs	r3, #63	@ 0x3f
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000afa:	230b      	movs	r3, #11
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4866      	ldr	r0, [pc, #408]	@ (8000ca4 <MX_GPIO_Init+0x2e8>)
 8000b0a:	f000 fda3 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b12:	230b      	movs	r3, #11
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b24:	f000 fd96 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b28:	23f0      	movs	r3, #240	@ 0xf0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f000 fd85 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4850      	ldr	r0, [pc, #320]	@ (8000ca8 <MX_GPIO_Init+0x2ec>)
 8000b66:	f000 fd75 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	484a      	ldr	r0, [pc, #296]	@ (8000ca8 <MX_GPIO_Init+0x2ec>)
 8000b7e:	f000 fd69 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000b82:	2344      	movs	r3, #68	@ 0x44
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4844      	ldr	r0, [pc, #272]	@ (8000ca8 <MX_GPIO_Init+0x2ec>)
 8000b96:	f000 fd5d 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b9a:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4839      	ldr	r0, [pc, #228]	@ (8000c9c <MX_GPIO_Init+0x2e0>)
 8000bb8:	f000 fd4c 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bbc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4830      	ldr	r0, [pc, #192]	@ (8000c9c <MX_GPIO_Init+0x2e0>)
 8000bda:	f000 fd3b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000bde:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bf0:	230d      	movs	r3, #13
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482b      	ldr	r0, [pc, #172]	@ (8000ca8 <MX_GPIO_Init+0x2ec>)
 8000bfc:	f000 fd2a 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000c12:	230e      	movs	r3, #14
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0x2ec>)
 8000c1e:	f000 fd19 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c34:	2307      	movs	r3, #7
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481b      	ldr	r0, [pc, #108]	@ (8000cac <MX_GPIO_Init+0x2f0>)
 8000c40:	f000 fd08 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c44:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c56:	2302      	movs	r3, #2
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4812      	ldr	r0, [pc, #72]	@ (8000cac <MX_GPIO_Init+0x2f0>)
 8000c62:	f000 fcf7 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c66:	2340      	movs	r3, #64	@ 0x40
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c76:	230d      	movs	r3, #13
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_GPIO_Init+0x2e8>)
 8000c82:	f000 fce7 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c96:	e00b      	b.n	8000cb0 <MX_GPIO_Init+0x2f4>
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48001000 	.word	0x48001000
 8000ca0:	48001400 	.word	0x48001400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	484f      	ldr	r0, [pc, #316]	@ (8000df8 <MX_GPIO_Init+0x43c>)
 8000cbc:	f000 fcca 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cc0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4846      	ldr	r0, [pc, #280]	@ (8000df8 <MX_GPIO_Init+0x43c>)
 8000cde:	f000 fcb9 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ce2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f000 fca7 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f000 fc99 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d22:	2301      	movs	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d32:	2309      	movs	r3, #9
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482f      	ldr	r0, [pc, #188]	@ (8000dfc <MX_GPIO_Init+0x440>)
 8000d3e:	f000 fc89 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d42:	2304      	movs	r3, #4
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d52:	230c      	movs	r3, #12
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4827      	ldr	r0, [pc, #156]	@ (8000dfc <MX_GPIO_Init+0x440>)
 8000d5e:	f000 fc79 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d62:	2378      	movs	r3, #120	@ 0x78
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d72:	2307      	movs	r3, #7
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481f      	ldr	r0, [pc, #124]	@ (8000dfc <MX_GPIO_Init+0x440>)
 8000d7e:	f000 fc69 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4819      	ldr	r0, [pc, #100]	@ (8000e00 <MX_GPIO_Init+0x444>)
 8000d9a:	f000 fc5b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d9e:	2338      	movs	r3, #56	@ 0x38
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dae:	2306      	movs	r3, #6
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <MX_GPIO_Init+0x448>)
 8000dba:	f000 fc4b 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <MX_GPIO_Init+0x44c>)
 8000dda:	f000 fc3b 	bl	8001654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2028      	movs	r0, #40	@ 0x28
 8000de4:	f000 fbff 	bl	80015e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de8:	2028      	movs	r0, #40	@ 0x28
 8000dea:	f000 fc18 	bl	800161e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dee:	bf00      	nop
 8000df0:	3738      	adds	r7, #56	@ 0x38
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000c00 	.word	0x48000c00
 8000e00:	48001800 	.word	0x48001800
 8000e04:	48000400 	.word	0x48000400
 8000e08:	48001000 	.word	0x48001000

08000e0c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e14:	1d39      	adds	r1, r7, #4
 8000e16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <__io_putchar+0x20>)
 8000e1e:	f003 fd65 	bl	80048ec <HAL_UART_Transmit>
  return ch;
 8000e22:	687b      	ldr	r3, [r7, #4]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200400d8 	.word	0x200400d8

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <Error_Handler+0x8>

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e46:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ae      	sub	sp, #184	@ 0xb8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2294      	movs	r2, #148	@ 0x94
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fcf6 	bl	8005896 <memset>
  if(hi2c->Instance==I2C1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <HAL_I2C_MspInit+0xb0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d13b      	bne.n	8000f2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb4:	2340      	movs	r3, #64	@ 0x40
 8000eb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fb05 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ecc:	f7ff ffb0 	bl	8000e30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f02:	2304      	movs	r3, #4
 8000f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000f10:	f000 fba0 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	37b8      	adds	r7, #184	@ 0xb8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40005400 	.word	0x40005400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ae      	sub	sp, #184	@ 0xb8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	2294      	movs	r2, #148	@ 0x94
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 fc98 	bl	8005896 <memset>
  if(huart->Instance==LPUART1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a22      	ldr	r2, [pc, #136]	@ (8000ff4 <HAL_UART_MspInit+0xb4>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d13d      	bne.n	8000fec <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f70:	2320      	movs	r3, #32
 8000f72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 faa7 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff ff52 	bl	8000e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f90:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_UART_MspInit+0xb8>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000fbc:	f001 fba0 	bl	8002700 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000fc0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_UART_MspInit+0xbc>)
 8000fe8:	f000 fb34 	bl	8001654 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000fec:	bf00      	nop
 8000fee:	37b8      	adds	r7, #184	@ 0xb8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40008000 	.word	0x40008000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001800 	.word	0x48001800

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001020:	d14d      	bne.n	80010be <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001022:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a28      	ldr	r2, [pc, #160]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a22      	ldr	r2, [pc, #136]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <HAL_TIM_Base_MspInit+0xc8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106a:	2301      	movs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800107a:	2301      	movs	r3, #1
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001088:	f000 fae4 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800108c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800109e:	2301      	movs	r3, #1
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <HAL_TIM_Base_MspInit+0xcc>)
 80010aa:	f000 fad3 	bl	8001654 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201c      	movs	r0, #28
 80010b4:	f000 fa97 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 fab0 	bl	800161e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	@ 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <NMI_Handler+0x4>

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <MemManage_Handler+0x4>

080010e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f963 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f002 ffab 	bl	8004090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2004016c 	.word	0x2004016c

08001144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001148:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800114c:	f000 fc14 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800115e:	f004 fbe9 	bl	8005934 <__errno>
 8001162:	4603      	mov	r3, r0
 8001164:	2216      	movs	r2, #22
 8001166:	601a      	str	r2, [r3, #0]
  return -1;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_exit>:

void _exit (int status)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ffe7 	bl	8001154 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001186:	bf00      	nop
 8001188:	e7fd      	b.n	8001186 <_exit+0x12>

0800118a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e00a      	b.n	80011b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119c:	f3af 8000 	nop.w
 80011a0:	4601      	mov	r1, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	60ba      	str	r2, [r7, #8]
 80011a8:	b2ca      	uxtb	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf0      	blt.n	800119c <_read+0x12>
  }

  return len;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e009      	b.n	80011ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	60ba      	str	r2, [r7, #8]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fe14 	bl	8000e0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbf1      	blt.n	80011d6 <_write+0x12>
  }
  return len;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_close>:

int _close(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001224:	605a      	str	r2, [r3, #4]
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_isatty>:

int _isatty(int file)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f004 fb4e 	bl	8005934 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200a0000 	.word	0x200a0000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	200401bc 	.word	0x200401bc
 80012cc:	20040310 	.word	0x20040310

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800132c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	@ (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	@ (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	@ (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f004 fb0d 	bl	8005940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff f9d5 	bl	80006d4 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001330:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001334:	20040068 	.word	0x20040068
  ldr r2, =_sidata
 8001338:	080065f8 	.word	0x080065f8
  ldr r2, =_sbss
 800133c:	20040068 	.word	0x20040068
  ldr r4, =_ebss
 8001340:	20040310 	.word	0x20040310

08001344 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f93d 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f80e 	bl	8001378 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff fd68 	bl	8000e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_InitTick+0x6c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d023      	beq.n	80013d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_InitTick+0x70>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f949 	bl	800163a <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10f      	bne.n	80013ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d809      	bhi.n	80013c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f913 	bl	80015e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_InitTick+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e007      	b.n	80013d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e004      	b.n	80013d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e001      	b.n	80013d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20040008 	.word	0x20040008
 80013e8:	20040000 	.word	0x20040000
 80013ec:	20040004 	.word	0x20040004

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20040008 	.word	0x20040008
 8001414:	200401c0 	.word	0x200401c0

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200401c0 	.word	0x200401c0

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	@ (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	@ (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	@ (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff29 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff3e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff8e 	bl	8001524 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff31 	bl	8001494 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e166      	b.n	8001932 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8158 	beq.w	800192c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d005      	beq.n	8001694 <HAL_GPIO_Init+0x40>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d130      	bne.n	80016f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ca:	2201      	movs	r2, #1
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 0201 	and.w	r2, r3, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d017      	beq.n	8001732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d123      	bne.n	8001786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	6939      	ldr	r1, [r7, #16]
 8001782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0203 	and.w	r2, r3, #3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80b2 	beq.w	800192c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c8:	4b61      	ldr	r3, [pc, #388]	@ (8001950 <HAL_GPIO_Init+0x2fc>)
 80017ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017cc:	4a60      	ldr	r2, [pc, #384]	@ (8001950 <HAL_GPIO_Init+0x2fc>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001950 <HAL_GPIO_Init+0x2fc>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001954 <HAL_GPIO_Init+0x300>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800180a:	d02b      	beq.n	8001864 <HAL_GPIO_Init+0x210>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_GPIO_Init+0x304>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d025      	beq.n	8001860 <HAL_GPIO_Init+0x20c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a51      	ldr	r2, [pc, #324]	@ (800195c <HAL_GPIO_Init+0x308>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d01f      	beq.n	800185c <HAL_GPIO_Init+0x208>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a50      	ldr	r2, [pc, #320]	@ (8001960 <HAL_GPIO_Init+0x30c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d019      	beq.n	8001858 <HAL_GPIO_Init+0x204>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <HAL_GPIO_Init+0x310>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x200>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4e      	ldr	r2, [pc, #312]	@ (8001968 <HAL_GPIO_Init+0x314>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1fc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4d      	ldr	r2, [pc, #308]	@ (800196c <HAL_GPIO_Init+0x318>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1f8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <HAL_GPIO_Init+0x31c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1f4>
 8001844:	2307      	movs	r3, #7
 8001846:	e00e      	b.n	8001866 <HAL_GPIO_Init+0x212>
 8001848:	2308      	movs	r3, #8
 800184a:	e00c      	b.n	8001866 <HAL_GPIO_Init+0x212>
 800184c:	2306      	movs	r3, #6
 800184e:	e00a      	b.n	8001866 <HAL_GPIO_Init+0x212>
 8001850:	2305      	movs	r3, #5
 8001852:	e008      	b.n	8001866 <HAL_GPIO_Init+0x212>
 8001854:	2304      	movs	r3, #4
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x212>
 8001858:	2303      	movs	r3, #3
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x212>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x212>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x212>
 8001864:	2300      	movs	r3, #0
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001876:	4937      	ldr	r1, [pc, #220]	@ (8001954 <HAL_GPIO_Init+0x300>)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001884:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_GPIO_Init+0x320>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a8:	4a32      	ldr	r2, [pc, #200]	@ (8001974 <HAL_GPIO_Init+0x320>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ae:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <HAL_GPIO_Init+0x320>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d2:	4a28      	ldr	r2, [pc, #160]	@ (8001974 <HAL_GPIO_Init+0x320>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_GPIO_Init+0x320>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001974 <HAL_GPIO_Init+0x320>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_GPIO_Init+0x320>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001926:	4a13      	ldr	r2, [pc, #76]	@ (8001974 <HAL_GPIO_Init+0x320>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	f47f ae91 	bne.w	8001664 <HAL_GPIO_Init+0x10>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000800 	.word	0x48000800
 8001960:	48000c00 	.word	0x48000c00
 8001964:	48001000 	.word	0x48001000
 8001968:	48001400 	.word	0x48001400
 800196c:	48001800 	.word	0x48001800
 8001970:	48001c00 	.word	0x48001c00
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdfa 	bl	8000590 <HAL_GPIO_EXTI_Callback>
  }
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e08d      	b.n	8001ad6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fa58 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2224      	movs	r2, #36	@ 0x24
 80019d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	e006      	b.n	8001a30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d108      	bne.n	8001a4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	e007      	b.n	8001a5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69d9      	ldr	r1, [r3, #28]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	817b      	strh	r3, [r7, #10]
 8001af0:	4613      	mov	r3, r2
 8001af2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	f040 80fd 	bne.w	8001cfc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_I2C_Master_Transmit+0x30>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e0f6      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x21e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b18:	f7ff fc7e 	bl	8001418 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2319      	movs	r3, #25
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fa0a 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e1      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2221      	movs	r2, #33	@ 0x21
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2210      	movs	r2, #16
 8001b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	893a      	ldrh	r2, [r7, #8]
 8001b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2bff      	cmp	r3, #255	@ 0xff
 8001b6a:	d906      	bls.n	8001b7a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	22ff      	movs	r2, #255	@ 0xff
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e007      	b.n	8001b8a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b88:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	8979      	ldrh	r1, [r7, #10]
 8001bce:	4b4e      	ldr	r3, [pc, #312]	@ (8001d08 <HAL_I2C_Master_Transmit+0x228>)
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fc05 	bl	80023e4 <I2C_TransferConfig>
 8001bda:	e066      	b.n	8001caa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	8979      	ldrh	r1, [r7, #10]
 8001be4:	4b48      	ldr	r3, [pc, #288]	@ (8001d08 <HAL_I2C_Master_Transmit+0x228>)
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fbfa 	bl	80023e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bf0:	e05b      	b.n	8001caa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	6a39      	ldr	r1, [r7, #32]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f9fd 	bl	8001ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07b      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d034      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x1ca>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d130      	bne.n	8001caa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f976 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e04d      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2bff      	cmp	r3, #255	@ 0xff
 8001c6a:	d90e      	bls.n	8001c8a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	22ff      	movs	r2, #255	@ 0xff
 8001c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fbae 	bl	80023e4 <I2C_TransferConfig>
 8001c88:	e00f      	b.n	8001caa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	8979      	ldrh	r1, [r7, #10]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fb9d 	bl	80023e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d19e      	bne.n	8001bf2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	6a39      	ldr	r1, [r7, #32]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f9e3 	bl	8002084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e01a      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_I2C_Master_Transmit+0x22c>)
 8001cdc:	400b      	ands	r3, r1
 8001cde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	80002000 	.word	0x80002000
 8001d0c:	fe00e800 	.word	0xfe00e800

08001d10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	817b      	strh	r3, [r7, #10]
 8001d20:	4613      	mov	r3, r2
 8001d22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	f040 80db 	bne.w	8001ee8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2C_Master_Receive+0x30>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e0d4      	b.n	8001eea <HAL_I2C_Master_Receive+0x1da>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d48:	f7ff fb66 	bl	8001418 <HAL_GetTick>
 8001d4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2319      	movs	r3, #25
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f8f2 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0bf      	b.n	8001eea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2222      	movs	r2, #34	@ 0x22
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2210      	movs	r2, #16
 8001d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	893a      	ldrh	r2, [r7, #8]
 8001d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2bff      	cmp	r3, #255	@ 0xff
 8001d9a:	d90e      	bls.n	8001dba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	4b52      	ldr	r3, [pc, #328]	@ (8001ef4 <HAL_I2C_Master_Receive+0x1e4>)
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fb16 	bl	80023e4 <I2C_TransferConfig>
 8001db8:	e06d      	b.n	8001e96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	8979      	ldrh	r1, [r7, #10]
 8001dcc:	4b49      	ldr	r3, [pc, #292]	@ (8001ef4 <HAL_I2C_Master_Receive+0x1e4>)
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fb05 	bl	80023e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001dda:	e05c      	b.n	8001e96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	6a39      	ldr	r1, [r7, #32]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f993 	bl	800210c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e07c      	b.n	8001eea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d034      	beq.n	8001e96 <HAL_I2C_Master_Receive+0x186>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d130      	bne.n	8001e96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f880 	bl	8001f44 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e04d      	b.n	8001eea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2bff      	cmp	r3, #255	@ 0xff
 8001e56:	d90e      	bls.n	8001e76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	22ff      	movs	r2, #255	@ 0xff
 8001e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	8979      	ldrh	r1, [r7, #10]
 8001e66:	2300      	movs	r3, #0
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fab8 	bl	80023e4 <I2C_TransferConfig>
 8001e74:	e00f      	b.n	8001e96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 faa7 	bl	80023e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d19d      	bne.n	8001ddc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	6a39      	ldr	r1, [r7, #32]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f8ed 	bl	8002084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e01a      	b.n	8001eea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_I2C_Master_Receive+0x1e8>)
 8001ec8:	400b      	ands	r3, r1
 8001eca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
  }
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	80002400 	.word	0x80002400
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d007      	beq.n	8001f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	619a      	str	r2, [r3, #24]
  }
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f54:	e03b      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f962 	bl	8002224 <I2C_IsErrorOccurred>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e041      	b.n	8001fee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d02d      	beq.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f72:	f7ff fa51 	bl	8001418 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d302      	bcc.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d122      	bne.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d113      	bne.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d0b4      	beq.n	8001f56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002002:	e033      	b.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f90b 	bl	8002224 <I2C_IsErrorOccurred>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e031      	b.n	800207c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d025      	beq.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7ff f9fa 	bl	8001418 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11a      	bne.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d013      	beq.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e007      	b.n	800207c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d1c4      	bne.n	8002004 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002090:	e02f      	b.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f8c4 	bl	8002224 <I2C_IsErrorOccurred>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e02d      	b.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a6:	f7ff f9b7 	bl	8001418 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11a      	bne.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d013      	beq.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e007      	b.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d1c8      	bne.n	8002092 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800211c:	e071      	b.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f87e 	bl	8002224 <I2C_IsErrorOccurred>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b20      	cmp	r3, #32
 800213e:	d13b      	bne.n	80021b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d138      	bne.n	80021b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d105      	bne.n	8002160 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b10      	cmp	r3, #16
 800216c:	d121      	bne.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2210      	movs	r2, #16
 8002174:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2204      	movs	r2, #4
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2220      	movs	r2, #32
 8002182:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002190:	400b      	ands	r3, r1
 8002192:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
 80021b0:	e002      	b.n	80021b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80021b8:	f7ff f92e 	bl	8001418 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d302      	bcc.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d119      	bne.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d116      	bne.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d00f      	beq.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b04      	cmp	r3, #4
 800220e:	d002      	beq.n	8002216 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d083      	beq.n	800211e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	fe00e800 	.word	0xfe00e800

08002224 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d068      	beq.n	8002322 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2210      	movs	r2, #16
 8002256:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002258:	e049      	b.n	80022ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d045      	beq.n	80022ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7ff f8d9 	bl	8001418 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <I2C_IsErrorOccurred+0x54>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d13a      	bne.n	80022ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002282:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800228a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800229a:	d121      	bne.n	80022e0 <I2C_IsErrorOccurred+0xbc>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022a2:	d01d      	beq.n	80022e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d01a      	beq.n	80022e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022ba:	f7ff f8ad 	bl	8001418 <HAL_GetTick>
 80022be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c0:	e00e      	b.n	80022e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022c2:	f7ff f8a9 	bl	8001418 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b19      	cmp	r3, #25
 80022ce:	d907      	bls.n	80022e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f043 0320 	orr.w	r3, r3, #32
 80022d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80022de:	e006      	b.n	80022ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d1e9      	bne.n	80022c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d003      	beq.n	8002304 <I2C_IsErrorOccurred+0xe0>
 80022fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0aa      	beq.n	800225a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2220      	movs	r2, #32
 8002312:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002366:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7ff fdaf 	bl	8001efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <I2C_IsErrorOccurred+0x1bc>)
 80023aa:	400b      	ands	r3, r1
 80023ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80023d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	fe00e800 	.word	0xfe00e800

080023e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	4613      	mov	r3, r2
 80023f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023fc:	7a7b      	ldrb	r3, [r7, #9]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002404:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	4313      	orrs	r3, r2
 800240e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002412:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	0d5b      	lsrs	r3, r3, #21
 800241e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <I2C_TransferConfig+0x60>)
 8002424:	430b      	orrs	r3, r1
 8002426:	43db      	mvns	r3, r3
 8002428:	ea02 0103 	and.w	r1, r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	03ff63ff 	.word	0x03ff63ff

08002448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	d138      	bne.n	80024d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002468:	2302      	movs	r3, #2
 800246a:	e032      	b.n	80024d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	@ 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800249a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d139      	bne.n	8002568 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024fe:	2302      	movs	r3, #2
 8002500:	e033      	b.n	800256a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2224      	movs	r2, #36	@ 0x24
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002530:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800257c:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002588:	d102      	bne.n	8002590 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800258a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800258e:	e00b      	b.n	80025a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800259e:	d102      	bne.n	80025a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80025a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a4:	e000      	b.n	80025a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40007000 	.word	0x40007000

080025b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d141      	bne.n	800264a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c6:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d2:	d131      	bne.n	8002638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d4:	4b47      	ldr	r3, [pc, #284]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025da:	4a46      	ldr	r2, [pc, #280]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e4:	4b43      	ldr	r3, [pc, #268]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025ec:	4a41      	ldr	r2, [pc, #260]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025f4:	4b40      	ldr	r3, [pc, #256]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2232      	movs	r2, #50	@ 0x32
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a3f      	ldr	r2, [pc, #252]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	3301      	adds	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260a:	e002      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3b01      	subs	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002612:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261e:	d102      	bne.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f2      	bne.n	800260c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002626:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002632:	d158      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e057      	b.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002638:	4b2e      	ldr	r3, [pc, #184]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800263e:	4a2d      	ldr	r2, [pc, #180]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002644:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002648:	e04d      	b.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002650:	d141      	bne.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002652:	4b28      	ldr	r3, [pc, #160]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265e:	d131      	bne.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002660:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002666:	4a23      	ldr	r2, [pc, #140]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002670:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002678:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2232      	movs	r2, #50	@ 0x32
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4a1c      	ldr	r2, [pc, #112]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	3301      	adds	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002696:	e002      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3b01      	subs	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026aa:	d102      	bne.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f2      	bne.n	8002698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026be:	d112      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e011      	b.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026d4:	e007      	b.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d6:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026de:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40007000 	.word	0x40007000
 80026f8:	20040000 	.word	0x20040000
 80026fc:	431bde83 	.word	0x431bde83

08002700 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a04      	ldr	r2, [pc, #16]	@ (800271c <HAL_PWREx_EnableVddIO2+0x1c>)
 800270a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800270e:	6053      	str	r3, [r2, #4]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40007000 	.word	0x40007000

08002720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f000 bc08 	b.w	8002f44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002734:	4b96      	ldr	r3, [pc, #600]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273e:	4b94      	ldr	r3, [pc, #592]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80e4 	beq.w	800291e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_RCC_OscConfig+0x4c>
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	f040 808b 	bne.w	800287a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 8087 	bne.w	800287a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276c:	4b88      	ldr	r3, [pc, #544]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_OscConfig+0x64>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e3df      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	4b81      	ldr	r3, [pc, #516]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_RCC_OscConfig+0x7e>
 8002794:	4b7e      	ldr	r3, [pc, #504]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800279c:	e005      	b.n	80027aa <HAL_RCC_OscConfig+0x8a>
 800279e:	4b7c      	ldr	r3, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d223      	bcs.n	80027f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fdcc 	bl	8003350 <RCC_SetFlashLatencyFromMSIRange>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e3c0      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c2:	4b73      	ldr	r3, [pc, #460]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a72      	ldr	r2, [pc, #456]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b70      	ldr	r3, [pc, #448]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	496d      	ldr	r1, [pc, #436]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	4968      	ldr	r1, [pc, #416]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
 80027f4:	e025      	b.n	8002842 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f6:	4b66      	ldr	r3, [pc, #408]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a65      	ldr	r2, [pc, #404]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4960      	ldr	r1, [pc, #384]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002814:	4b5e      	ldr	r3, [pc, #376]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	495b      	ldr	r1, [pc, #364]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fd8c 	bl	8003350 <RCC_SetFlashLatencyFromMSIRange>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e380      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002842:	f000 fcc1 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b51      	ldr	r3, [pc, #324]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4950      	ldr	r1, [pc, #320]	@ (8002994 <HAL_RCC_OscConfig+0x274>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a4e      	ldr	r2, [pc, #312]	@ (8002998 <HAL_RCC_OscConfig+0x278>)
 8002860:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002862:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x27c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd86 	bl	8001378 <HAL_InitTick>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d052      	beq.n	800291c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	e364      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d032      	beq.n	80028e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002882:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800288e:	f7fe fdc3 	bl	8001418 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002896:	f7fe fdbf 	bl	8001418 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e34d      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b4:	4b36      	ldr	r3, [pc, #216]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a35      	ldr	r2, [pc, #212]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028ba:	f043 0308 	orr.w	r3, r3, #8
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4930      	ldr	r1, [pc, #192]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	492b      	ldr	r1, [pc, #172]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e01a      	b.n	800291e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028e8:	4b29      	ldr	r3, [pc, #164]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fd90 	bl	8001418 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fc:	f7fe fd8c 	bl	8001418 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e31a      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x1dc>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d073      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x21c>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d10e      	bne.n	8002954 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d10b      	bne.n	8002954 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d063      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d15f      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e2f7      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x24c>
 800295e:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a0b      	ldr	r2, [pc, #44]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e025      	b.n	80029b8 <HAL_RCC_OscConfig+0x298>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002974:	d114      	bne.n	80029a0 <HAL_RCC_OscConfig+0x280>
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a02      	ldr	r2, [pc, #8]	@ (8002990 <HAL_RCC_OscConfig+0x270>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e013      	b.n	80029b8 <HAL_RCC_OscConfig+0x298>
 8002990:	40021000 	.word	0x40021000
 8002994:	08006544 	.word	0x08006544
 8002998:	20040000 	.word	0x20040000
 800299c:	20040004 	.word	0x20040004
 80029a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fd2a 	bl	8001418 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fd26 	bl	8001418 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e2b4      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029da:	4b92      	ldr	r3, [pc, #584]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2a8>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fd16 	bl	8001418 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fd12 	bl	8001418 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e2a0      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x2d0>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d060      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x310>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d116      	bne.n	8002a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a30:	4b7c      	ldr	r3, [pc, #496]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_OscConfig+0x328>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e27d      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	4973      	ldr	r1, [pc, #460]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	e040      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d023      	beq.n	8002aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a66:	4b6f      	ldr	r3, [pc, #444]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fcd1 	bl	8001418 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fccd 	bl	8001418 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e25b      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8c:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b62      	ldr	r3, [pc, #392]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	495f      	ldr	r1, [pc, #380]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e018      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fcad 	bl	8001418 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fca9 	bl	8001418 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e237      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03c      	beq.n	8002b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af4:	4b4b      	ldr	r3, [pc, #300]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afa:	4a4a      	ldr	r2, [pc, #296]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe fc88 	bl	8001418 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fc84 	bl	8001418 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e212      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <HAL_RCC_OscConfig+0x3ec>
 8002b2c:	e01b      	b.n	8002b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b34:	4a3b      	ldr	r2, [pc, #236]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fc6b 	bl	8001418 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe fc67 	bl	8001418 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1f5      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b58:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ef      	bne.n	8002b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80a6 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a26      	ldr	r2, [pc, #152]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba0:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d118      	bne.n	8002bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bac:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fc2e 	bl	8001418 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe fc2a 	bl	8001418 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1b8      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_RCC_OscConfig+0x508>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x4d8>
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf6:	e029      	b.n	8002c4c <HAL_RCC_OscConfig+0x52c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d115      	bne.n	8002c2c <HAL_RCC_OscConfig+0x50c>
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	4a03      	ldr	r2, [pc, #12]	@ (8002c24 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x52c>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a9c      	ldr	r2, [pc, #624]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c3c:	4b99      	ldr	r3, [pc, #612]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	4a98      	ldr	r2, [pc, #608]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d016      	beq.n	8002c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fbe0 	bl	8001418 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fbdc 	bl	8001418 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e168      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c72:	4b8c      	ldr	r3, [pc, #560]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ed      	beq.n	8002c5c <HAL_RCC_OscConfig+0x53c>
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fbc9 	bl	8001418 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe fbc5 	bl	8001418 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e151      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca0:	4b80      	ldr	r3, [pc, #512]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ed      	bne.n	8002c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd4:	4b73      	ldr	r3, [pc, #460]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cda:	4a72      	ldr	r2, [pc, #456]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fb98 	bl	8001418 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cec:	f7fe fb94 	bl	8001418 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e122      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cfe:	4b69      	ldr	r3, [pc, #420]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCC_OscConfig+0x5cc>
 8002d0c:	e01b      	b.n	8002d46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d0e:	4b65      	ldr	r3, [pc, #404]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d14:	4a63      	ldr	r2, [pc, #396]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fb7b 	bl	8001418 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d26:	f7fe fb77 	bl	8001418 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e105      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ef      	bne.n	8002d26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80f9 	beq.w	8002f42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f040 80cf 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d12c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d123      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d113      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d109      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d071      	beq.n	8002eac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d068      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dce:	4b35      	ldr	r3, [pc, #212]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dda:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0ac      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dea:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002df6:	f7fe fb0f 	bl	8001418 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fb0b 	bl	8001418 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e099      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e10:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCC_OscConfig+0x788>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e36:	0212      	lsls	r2, r2, #8
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e3e:	0852      	lsrs	r2, r2, #1
 8002e40:	3a01      	subs	r2, #1
 8002e42:	0552      	lsls	r2, r2, #21
 8002e44:	4311      	orrs	r1, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e4a:	0852      	lsrs	r2, r2, #1
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0652      	lsls	r2, r2, #25
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e56:	06d2      	lsls	r2, r2, #27
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	4912      	ldr	r1, [pc, #72]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e78:	f7fe face 	bl	8001418 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe faca 	bl	8001418 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e058      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_OscConfig+0x784>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e9e:	e050      	b.n	8002f42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04f      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eac:	4b27      	ldr	r3, [pc, #156]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d144      	bne.n	8002f42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a23      	ldr	r2, [pc, #140]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec4:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed0:	f7fe faa2 	bl	8001418 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fa9e 	bl	8001418 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e02c      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x7b8>
 8002ef6:	e024      	b.n	8002f42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d01f      	beq.n	8002f3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a12      	ldr	r2, [pc, #72]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fa85 	bl	8001418 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe fa81 	bl	8001418 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e00f      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	4905      	ldr	r1, [pc, #20]	@ (8002f4c <HAL_RCC_OscConfig+0x82c>)
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_OscConfig+0x830>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60cb      	str	r3, [r1, #12]
 8002f3c:	e001      	b.n	8002f42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	feeefffc 	.word	0xfeeefffc

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e11d      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b90      	ldr	r3, [pc, #576]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d910      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	498b      	ldr	r1, [pc, #556]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b89      	ldr	r3, [pc, #548]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e105      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b81      	ldr	r3, [pc, #516]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d908      	bls.n	8002fca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	497b      	ldr	r1, [pc, #492]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d079      	beq.n	80030ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d11e      	bne.n	800301c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b75      	ldr	r3, [pc, #468]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0dc      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002fee:	f000 fa09 	bl	8003404 <RCC_GetSysClockFreqFromPLLSource>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a70      	ldr	r2, [pc, #448]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d946      	bls.n	8003088 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d140      	bne.n	8003088 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003006:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800300e:	4a69      	ldr	r2, [pc, #420]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003014:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e035      	b.n	8003088 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003024:	4b63      	ldr	r3, [pc, #396]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0b9      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800303c:	4b5d      	ldr	r3, [pc, #372]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0ad      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	4b59      	ldr	r3, [pc, #356]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0a5      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800305c:	f000 f8b4 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003060:	4603      	mov	r3, r0
 8003062:	4a55      	ldr	r2, [pc, #340]	@ (80031b8 <HAL_RCC_ClockConfig+0x264>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d90f      	bls.n	8003088 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003068:	4b52      	ldr	r3, [pc, #328]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003074:	4b4f      	ldr	r3, [pc, #316]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800307c:	4a4d      	ldr	r2, [pc, #308]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 800307e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003082:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003088:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 0203 	bic.w	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4947      	ldr	r1, [pc, #284]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309a:	f7fe f9bd 	bl	8001418 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a2:	f7fe f9b9 	bl	8001418 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e077      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b8:	4b3e      	ldr	r3, [pc, #248]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 020c 	and.w	r2, r3, #12
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d1eb      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b80      	cmp	r3, #128	@ 0x80
 80030ce:	d105      	bne.n	80030dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030d0:	4b38      	ldr	r3, [pc, #224]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a37      	ldr	r2, [pc, #220]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 80030d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d208      	bcs.n	800310a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b2e      	ldr	r3, [pc, #184]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	492b      	ldr	r1, [pc, #172]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310a:	4b29      	ldr	r3, [pc, #164]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d210      	bcs.n	800313a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003118:	4b25      	ldr	r3, [pc, #148]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 020f 	bic.w	r2, r3, #15
 8003120:	4923      	ldr	r1, [pc, #140]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003128:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <HAL_RCC_ClockConfig+0x25c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e036      	b.n	80031a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003146:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4918      	ldr	r1, [pc, #96]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003164:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4910      	ldr	r1, [pc, #64]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003178:	f000 f826 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HAL_RCC_ClockConfig+0x260>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	490c      	ldr	r1, [pc, #48]	@ (80031bc <HAL_RCC_ClockConfig+0x268>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <HAL_RCC_ClockConfig+0x26c>)
 8003196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <HAL_RCC_ClockConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe f8eb 	bl	8001378 <HAL_InitTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40021000 	.word	0x40021000
 80031b8:	04c4b400 	.word	0x04c4b400
 80031bc:	08006544 	.word	0x08006544
 80031c0:	20040000 	.word	0x20040000
 80031c4:	20040004 	.word	0x20040004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	@ 0x24
 80031cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d6:	4b3e      	ldr	r3, [pc, #248]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e0:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d121      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d11e      	bne.n	800323a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031fc:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003208:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e005      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003218:	4b2d      	ldr	r3, [pc, #180]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003224:	4a2b      	ldr	r2, [pc, #172]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d102      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003240:	4b25      	ldr	r3, [pc, #148]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e004      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b08      	cmp	r3, #8
 800324a:	d101      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800324c:	4b23      	ldr	r3, [pc, #140]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x114>)
 800324e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d134      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0xa6>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d003      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xac>
 800326c:	e005      	b.n	800327a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800326e:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003270:	617b      	str	r3, [r7, #20]
      break;
 8003272:	e005      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003274:	4b19      	ldr	r3, [pc, #100]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003276:	617b      	str	r3, [r7, #20]
      break;
 8003278:	e002      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	617b      	str	r3, [r7, #20]
      break;
 800327e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003280:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3301      	adds	r3, #1
 800328c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	fb03 f202 	mul.w	r2, r3, r2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	0e5b      	lsrs	r3, r3, #25
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	3301      	adds	r3, #1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032c0:	69bb      	ldr	r3, [r7, #24]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	@ 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	0800655c 	.word	0x0800655c
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20040000 	.word	0x20040000

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032fc:	f7ff fff0 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4904      	ldr	r1, [pc, #16]	@ (8003320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	08006554 	.word	0x08006554

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003328:	f7ff ffda 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0adb      	lsrs	r3, r3, #11
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	@ (800334c <HAL_RCC_GetPCLK2Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	08006554 	.word	0x08006554

08003350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800335c:	4b27      	ldr	r3, [pc, #156]	@ (80033fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003368:	f7ff f906 	bl	8002578 <HAL_PWREx_GetVoltageRange>
 800336c:	6178      	str	r0, [r7, #20]
 800336e:	e014      	b.n	800339a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b22      	ldr	r3, [pc, #136]	@ (80033fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	@ 0x58
 800337c:	4b1f      	ldr	r3, [pc, #124]	@ (80033fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003388:	f7ff f8f6 	bl	8002578 <HAL_PWREx_GetVoltageRange>
 800338c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003398:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a0:	d10b      	bne.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b80      	cmp	r3, #128	@ 0x80
 80033a6:	d913      	bls.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80033ac:	d902      	bls.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ae:	2302      	movs	r3, #2
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e00d      	b.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b4:	2301      	movs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e00a      	b.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80033be:	d902      	bls.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033c0:	2302      	movs	r3, #2
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	e004      	b.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b70      	cmp	r3, #112	@ 0x70
 80033ca:	d101      	bne.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033cc:	2301      	movs	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 020f 	bic.w	r2, r3, #15
 80033d8:	4909      	ldr	r1, [pc, #36]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	40022000 	.word	0x40022000

08003404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800340a:	4b2d      	ldr	r3, [pc, #180]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d00b      	beq.n	8003432 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d825      	bhi.n	800346c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d008      	beq.n	8003438 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11f      	bne.n	800346c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800342c:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800342e:	613b      	str	r3, [r7, #16]
    break;
 8003430:	e01f      	b.n	8003472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003432:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003434:	613b      	str	r3, [r7, #16]
    break;
 8003436:	e01c      	b.n	8003472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003438:	4b21      	ldr	r3, [pc, #132]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003444:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e005      	b.n	8003460 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003460:	4a1a      	ldr	r2, [pc, #104]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	613b      	str	r3, [r7, #16]
    break;
 800346a:	e002      	b.n	8003472 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
    break;
 8003470:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	3301      	adds	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	fb03 f202 	mul.w	r2, r3, r2
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003498:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	0e5b      	lsrs	r3, r3, #25
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	3301      	adds	r3, #1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034b2:	683b      	ldr	r3, [r7, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40021000 	.word	0x40021000
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	007a1200 	.word	0x007a1200
 80034cc:	0800655c 	.word	0x0800655c

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d8:	2300      	movs	r3, #0
 80034da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034dc:	2300      	movs	r3, #0
 80034de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d040      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f0:	2b80      	cmp	r3, #128	@ 0x80
 80034f2:	d02a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034f4:	2b80      	cmp	r3, #128	@ 0x80
 80034f6:	d825      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034f8:	2b60      	cmp	r3, #96	@ 0x60
 80034fa:	d026      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034fc:	2b60      	cmp	r3, #96	@ 0x60
 80034fe:	d821      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003500:	2b40      	cmp	r3, #64	@ 0x40
 8003502:	d006      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003504:	2b40      	cmp	r3, #64	@ 0x40
 8003506:	d81d      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800350c:	2b20      	cmp	r3, #32
 800350e:	d010      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003510:	e018      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003512:	4b89      	ldr	r3, [pc, #548]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a88      	ldr	r2, [pc, #544]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351e:	e015      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fb02 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003530:	e00c      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3320      	adds	r3, #32
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fbed 	bl	8003d18 <RCCEx_PLLSAI2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	74fb      	strb	r3, [r7, #19]
      break;
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800354a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003552:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003558:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003560:	4975      	ldr	r1, [pc, #468]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003568:	e001      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d047      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003582:	d030      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003588:	d82a      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800358a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358e:	d02a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003594:	d824      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359a:	d008      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800359c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a0:	d81e      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80035a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035aa:	d010      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035ac:	e018      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ae:	4b62      	ldr	r3, [pc, #392]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a61      	ldr	r2, [pc, #388]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ba:	e015      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fab4 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035cc:	e00c      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3320      	adds	r3, #32
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fb9f 	bl	8003d18 <RCCEx_PLLSAI2_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035de:	e003      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	74fb      	strb	r3, [r7, #19]
      break;
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80035e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ee:	4b52      	ldr	r3, [pc, #328]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	494e      	ldr	r1, [pc, #312]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003604:	e001      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 809f 	beq.w	8003756 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800361c:	4b46      	ldr	r3, [pc, #280]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	4a40      	ldr	r2, [pc, #256]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363c:	6593      	str	r3, [r2, #88]	@ 0x58
 800363e:	4b3e      	ldr	r3, [pc, #248]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364e:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3a      	ldr	r2, [pc, #232]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800365a:	f7fd fedd 	bl	8001418 <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003660:	e009      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fd fed9 	bl	8001418 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d902      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	74fb      	strb	r3, [r7, #19]
        break;
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003676:	4b31      	ldr	r3, [pc, #196]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ef      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d15b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003688:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003692:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01f      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d019      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036b2:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036d2:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fe98 	bl	8001418 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	e00b      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd fe94 	bl	8001418 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d902      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	74fb      	strb	r3, [r7, #19]
            break;
 8003702:	e006      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ec      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10c      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003718:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	4903      	ldr	r1, [pc, #12]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003730:	e008      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
 8003736:	e005      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003744:	7c7b      	ldrb	r3, [r7, #17]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4ba0      	ldr	r3, [pc, #640]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	4a9f      	ldr	r2, [pc, #636]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003754:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003762:	4b9a      	ldr	r3, [pc, #616]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	f023 0203 	bic.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	4996      	ldr	r1, [pc, #600]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003784:	4b91      	ldr	r3, [pc, #580]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f023 020c 	bic.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	498e      	ldr	r1, [pc, #568]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a6:	4b89      	ldr	r3, [pc, #548]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	4985      	ldr	r1, [pc, #532]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c8:	4b80      	ldr	r3, [pc, #512]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d6:	497d      	ldr	r1, [pc, #500]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ea:	4b78      	ldr	r3, [pc, #480]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f8:	4974      	ldr	r1, [pc, #464]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800380c:	4b6f      	ldr	r3, [pc, #444]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	496c      	ldr	r1, [pc, #432]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800382e:	4b67      	ldr	r3, [pc, #412]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800383c:	4963      	ldr	r1, [pc, #396]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003850:	4b5e      	ldr	r3, [pc, #376]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800385e:	495b      	ldr	r1, [pc, #364]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003872:	4b56      	ldr	r3, [pc, #344]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003878:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	4952      	ldr	r1, [pc, #328]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003894:	4b4d      	ldr	r3, [pc, #308]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	494a      	ldr	r1, [pc, #296]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b6:	4b45      	ldr	r3, [pc, #276]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	4941      	ldr	r1, [pc, #260]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038d8:	4b3c      	ldr	r3, [pc, #240]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e6:	4939      	ldr	r1, [pc, #228]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d028      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fa:	4b34      	ldr	r3, [pc, #208]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003908:	4930      	ldr	r1, [pc, #192]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003918:	d106      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391a:	4b2c      	ldr	r3, [pc, #176]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4a2b      	ldr	r2, [pc, #172]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003920:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003924:	60d3      	str	r3, [r2, #12]
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f8f9 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d04d      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003960:	d108      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003962:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003968:	4a18      	ldr	r2, [pc, #96]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800396a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800396e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003972:	e012      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003974:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003976:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800397a:	4a14      	ldr	r2, [pc, #80]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003980:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003992:	490e      	ldr	r1, [pc, #56]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800399e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a4:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a08      	ldr	r2, [pc, #32]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ae:	60d3      	str	r3, [r2, #12]
 80039b0:	e020      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ba:	d109      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a02      	ldr	r2, [pc, #8]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c6:	60d3      	str	r3, [r2, #12]
 80039c8:	e014      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f8a5 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d028      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a00:	4b4a      	ldr	r3, [pc, #296]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a0e:	4947      	ldr	r1, [pc, #284]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b42      	ldr	r3, [pc, #264]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a41      	ldr	r2, [pc, #260]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
 8003a2c:	e011      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f876 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a5e:	4b33      	ldr	r3, [pc, #204]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6e:	492f      	ldr	r1, [pc, #188]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f851 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa8:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aae:	f023 0204 	bic.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab8:	491c      	ldr	r1, [pc, #112]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003acc:	4b17      	ldr	r3, [pc, #92]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ad2:	f023 0218 	bic.w	r2, r3, #24
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	4913      	ldr	r1, [pc, #76]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003af6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b00:	490a      	ldr	r1, [pc, #40]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000

08003b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b3e:	4b72      	ldr	r3, [pc, #456]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00e      	beq.n	8003b68 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d103      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d142      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	e03f      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d018      	beq.n	8003ba2 <RCCEx_PLLSAI1_Config+0x72>
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d825      	bhi.n	8003bc0 <RCCEx_PLLSAI1_Config+0x90>
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d002      	beq.n	8003b7e <RCCEx_PLLSAI1_Config+0x4e>
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d009      	beq.n	8003b90 <RCCEx_PLLSAI1_Config+0x60>
 8003b7c:	e020      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b7e:	4b62      	ldr	r3, [pc, #392]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11d      	bne.n	8003bc6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8e:	e01a      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b90:	4b5d      	ldr	r3, [pc, #372]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d116      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba0:	e013      	b.n	8003bca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ba2:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bae:	4b56      	ldr	r3, [pc, #344]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bbe:	e006      	b.n	8003bce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e004      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4949      	ldr	r1, [pc, #292]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 8086 	bne.w	8003cfc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bf0:	4b45      	ldr	r3, [pc, #276]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a44      	ldr	r2, [pc, #272]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fc0c 	bl	8001418 <HAL_GetTick>
 8003c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c02:	e009      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c04:	f7fd fc08 	bl	8001418 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d902      	bls.n	8003c18 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	73fb      	strb	r3, [r7, #15]
        break;
 8003c16:	e005      	b.n	8003c24 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c18:	4b3b      	ldr	r3, [pc, #236]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ef      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c30:	4b35      	ldr	r3, [pc, #212]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	4b35      	ldr	r3, [pc, #212]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6892      	ldr	r2, [r2, #8]
 8003c3c:	0211      	lsls	r1, r2, #8
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	06d2      	lsls	r2, r2, #27
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6852      	ldr	r2, [r2, #4]
 8003c4a:	3a01      	subs	r2, #1
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	492d      	ldr	r1, [pc, #180]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	610b      	str	r3, [r1, #16]
 8003c56:	e02d      	b.n	8003cb4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d115      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	0211      	lsls	r1, r2, #8
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6912      	ldr	r2, [r2, #16]
 8003c70:	0852      	lsrs	r2, r2, #1
 8003c72:	3a01      	subs	r2, #1
 8003c74:	0552      	lsls	r2, r2, #21
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	430a      	orrs	r2, r1
 8003c82:	4921      	ldr	r1, [pc, #132]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	610b      	str	r3, [r1, #16]
 8003c88:	e014      	b.n	8003cb4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6892      	ldr	r2, [r2, #8]
 8003c96:	0211      	lsls	r1, r2, #8
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6952      	ldr	r2, [r2, #20]
 8003c9c:	0852      	lsrs	r2, r2, #1
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	0652      	lsls	r2, r2, #25
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6852      	ldr	r2, [r2, #4]
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	430a      	orrs	r2, r1
 8003cae:	4916      	ldr	r1, [pc, #88]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cb4:	4b14      	ldr	r3, [pc, #80]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fbaa 	bl	8001418 <HAL_GetTick>
 8003cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc6:	e009      	b.n	8003cdc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc8:	f7fd fba6 	bl	8001418 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d902      	bls.n	8003cdc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cda:	e005      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ef      	beq.n	8003cc8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	4904      	ldr	r1, [pc, #16]	@ (8003d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	07ff800f 	.word	0x07ff800f
 8003d10:	ff9f800f 	.word	0xff9f800f
 8003d14:	f9ff800f 	.word	0xf9ff800f

08003d18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d26:	4b72      	ldr	r3, [pc, #456]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d32:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d103      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
       ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d142      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
 8003d4e:	e03f      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d018      	beq.n	8003d8a <RCCEx_PLLSAI2_Config+0x72>
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d825      	bhi.n	8003da8 <RCCEx_PLLSAI2_Config+0x90>
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d002      	beq.n	8003d66 <RCCEx_PLLSAI2_Config+0x4e>
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d009      	beq.n	8003d78 <RCCEx_PLLSAI2_Config+0x60>
 8003d64:	e020      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d66:	4b62      	ldr	r3, [pc, #392]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11d      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d76:	e01a      	b.n	8003dae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d78:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d88:	e013      	b.n	8003db2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8a:	4b59      	ldr	r3, [pc, #356]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d96:	4b56      	ldr	r3, [pc, #344]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003da6:	e006      	b.n	8003db6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e004      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4949      	ldr	r1, [pc, #292]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 8086 	bne.w	8003ee4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dd8:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a44      	ldr	r2, [pc, #272]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de4:	f7fd fb18 	bl	8001418 <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dea:	e009      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dec:	f7fd fb14 	bl	8001418 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d902      	bls.n	8003e00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfe:	e005      	b.n	8003e0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e00:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ef      	bne.n	8003dec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d168      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d113      	bne.n	8003e40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e18:	4b35      	ldr	r3, [pc, #212]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	0211      	lsls	r1, r2, #8
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	06d2      	lsls	r2, r2, #27
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6852      	ldr	r2, [r2, #4]
 8003e32:	3a01      	subs	r2, #1
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	430a      	orrs	r2, r1
 8003e38:	492d      	ldr	r1, [pc, #180]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	614b      	str	r3, [r1, #20]
 8003e3e:	e02d      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d115      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e46:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6892      	ldr	r2, [r2, #8]
 8003e52:	0211      	lsls	r1, r2, #8
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6912      	ldr	r2, [r2, #16]
 8003e58:	0852      	lsrs	r2, r2, #1
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	0552      	lsls	r2, r2, #21
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6852      	ldr	r2, [r2, #4]
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	4921      	ldr	r1, [pc, #132]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	614b      	str	r3, [r1, #20]
 8003e70:	e014      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e72:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6892      	ldr	r2, [r2, #8]
 8003e7e:	0211      	lsls	r1, r2, #8
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6952      	ldr	r2, [r2, #20]
 8003e84:	0852      	lsrs	r2, r2, #1
 8003e86:	3a01      	subs	r2, #1
 8003e88:	0652      	lsls	r2, r2, #25
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6852      	ldr	r2, [r2, #4]
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4916      	ldr	r1, [pc, #88]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fab6 	bl	8001418 <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eae:	e009      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb0:	f7fd fab2 	bl	8001418 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec2:	e005      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ed6:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	4904      	ldr	r1, [pc, #16]	@ (8003ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	07ff800f 	.word	0x07ff800f
 8003ef8:	ff9f800f 	.word	0xff9f800f
 8003efc:	f9ff800f 	.word	0xf9ff800f

08003f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e049      	b.n	8003fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd f86a 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 fa9e 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04f      	b.n	8004068 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff2:	d018      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8004078 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <HAL_TIM_Base_Start_IT+0xcc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <HAL_TIM_Base_Start_IT+0xd0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1b      	ldr	r2, [pc, #108]	@ (8004084 <HAL_TIM_Base_Start_IT+0xd4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <HAL_TIM_Base_Start_IT+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d115      	bne.n	8004052 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <HAL_TIM_Base_Start_IT+0xdc>)
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d015      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0xb4>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403e:	d011      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004050:	e008      	b.n	8004064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e000      	b.n	8004066 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004064:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40013400 	.word	0x40013400
 8004088:	40014000 	.word	0x40014000
 800408c:	00010007 	.word	0x00010007

08004090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d020      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0202 	mvn.w	r2, #2
 80040c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9b2 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9a4 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f9b5 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d020      	beq.n	8004140 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0204 	mvn.w	r2, #4
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f98c 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f97e 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f98f 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0208 	mvn.w	r2, #8
 800415c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2204      	movs	r2, #4
 8004162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f966 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f958 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f969 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01b      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f940 	bl	8004444 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f932 	bl	8004430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f943 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00c      	beq.n	80041fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0201 	mvn.w	r2, #1
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fa5c 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00c      	beq.n	800422a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fafd 	bl	8004824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00c      	beq.n	800424e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 faf5 	bl	8004838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00c      	beq.n	8004272 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800426a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8fd 	bl	800446c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0220 	mvn.w	r2, #32
 800428e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fabd 	bl	8004810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_ConfigClockSource+0x1c>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e0b6      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x18a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f6:	d03e      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xd8>
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fc:	f200 8087 	bhi.w	800440e <HAL_TIM_ConfigClockSource+0x170>
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004304:	f000 8086 	beq.w	8004414 <HAL_TIM_ConfigClockSource+0x176>
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430c:	d87f      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 800430e:	2b70      	cmp	r3, #112	@ 0x70
 8004310:	d01a      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0xaa>
 8004312:	2b70      	cmp	r3, #112	@ 0x70
 8004314:	d87b      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 8004316:	2b60      	cmp	r3, #96	@ 0x60
 8004318:	d050      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0x11e>
 800431a:	2b60      	cmp	r3, #96	@ 0x60
 800431c:	d877      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 800431e:	2b50      	cmp	r3, #80	@ 0x50
 8004320:	d03c      	beq.n	800439c <HAL_TIM_ConfigClockSource+0xfe>
 8004322:	2b50      	cmp	r3, #80	@ 0x50
 8004324:	d873      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 8004326:	2b40      	cmp	r3, #64	@ 0x40
 8004328:	d058      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0x13e>
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d86f      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 800432e:	2b30      	cmp	r3, #48	@ 0x30
 8004330:	d064      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15e>
 8004332:	2b30      	cmp	r3, #48	@ 0x30
 8004334:	d86b      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 8004336:	2b20      	cmp	r3, #32
 8004338:	d060      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15e>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d867      	bhi.n	800440e <HAL_TIM_ConfigClockSource+0x170>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d05c      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15e>
 8004342:	2b10      	cmp	r3, #16
 8004344:	d05a      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0x15e>
 8004346:	e062      	b.n	800440e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004358:	f000 f9b2 	bl	80046c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800436a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
      break;
 8004374:	e04f      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	f000 f99b 	bl	80046c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004398:	609a      	str	r2, [r3, #8]
      break;
 800439a:	e03c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a8:	461a      	mov	r2, r3
 80043aa:	f000 f90f 	bl	80045cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2150      	movs	r1, #80	@ 0x50
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f968 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 80043ba:	e02c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c8:	461a      	mov	r2, r3
 80043ca:	f000 f92e 	bl	800462a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2160      	movs	r1, #96	@ 0x60
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f958 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 80043da:	e01c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e8:	461a      	mov	r2, r3
 80043ea:	f000 f8ef 	bl	80045cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2140      	movs	r1, #64	@ 0x40
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f948 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 80043fa:	e00c      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 f93f 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 800440c:	e003      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      break;
 8004412:	e000      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004414:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a46      	ldr	r2, [pc, #280]	@ (80045ac <TIM_Base_SetConfig+0x12c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d00f      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a43      	ldr	r2, [pc, #268]	@ (80045b0 <TIM_Base_SetConfig+0x130>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a42      	ldr	r2, [pc, #264]	@ (80045b4 <TIM_Base_SetConfig+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a41      	ldr	r2, [pc, #260]	@ (80045b8 <TIM_Base_SetConfig+0x138>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a40      	ldr	r2, [pc, #256]	@ (80045bc <TIM_Base_SetConfig+0x13c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a35      	ldr	r2, [pc, #212]	@ (80045ac <TIM_Base_SetConfig+0x12c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e0:	d01b      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a32      	ldr	r2, [pc, #200]	@ (80045b0 <TIM_Base_SetConfig+0x130>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d017      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a31      	ldr	r2, [pc, #196]	@ (80045b4 <TIM_Base_SetConfig+0x134>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a30      	ldr	r2, [pc, #192]	@ (80045b8 <TIM_Base_SetConfig+0x138>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	@ (80045bc <TIM_Base_SetConfig+0x13c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2e      	ldr	r2, [pc, #184]	@ (80045c0 <TIM_Base_SetConfig+0x140>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2d      	ldr	r2, [pc, #180]	@ (80045c4 <TIM_Base_SetConfig+0x144>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	@ (80045c8 <TIM_Base_SetConfig+0x148>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <TIM_Base_SetConfig+0x12c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00f      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a18      	ldr	r2, [pc, #96]	@ (80045bc <TIM_Base_SetConfig+0x13c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <TIM_Base_SetConfig+0x140>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a16      	ldr	r2, [pc, #88]	@ (80045c4 <TIM_Base_SetConfig+0x144>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0xf8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a15      	ldr	r2, [pc, #84]	@ (80045c8 <TIM_Base_SetConfig+0x148>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]
  }
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40013400 	.word	0x40013400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 030a 	bic.w	r3, r3, #10
 8004608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462a:	b480      	push	{r7}
 800462c:	b087      	sub	sp, #28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f023 0210 	bic.w	r2, r3, #16
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	031b      	lsls	r3, r3, #12
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004666:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f043 0307 	orr.w	r3, r3, #7
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e068      	b.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2e      	ldr	r2, [pc, #184]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2d      	ldr	r2, [pc, #180]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d108      	bne.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004752:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004764:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d018      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1b      	ldr	r2, [pc, #108]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10c      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40013400 	.word	0x40013400
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40014000 	.word	0x40014000

08004810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e042      	b.n	80048e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fc fb65 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2224      	movs	r2, #36	@ 0x24
 800487a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fbb2 	bl	8005000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f8b3 	bl	8004a08 <UART_SetConfig>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e01b      	b.n	80048e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fc31 	bl	8005144 <UART_CheckIdleState>
 80048e2:	4603      	mov	r3, r0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	@ 0x28
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	2b20      	cmp	r3, #32
 8004904:	d17b      	bne.n	80049fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_UART_Transmit+0x26>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e074      	b.n	8004a00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2221      	movs	r2, #33	@ 0x21
 8004922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004926:	f7fc fd77 	bl	8001418 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004944:	d108      	bne.n	8004958 <HAL_UART_Transmit+0x6c>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e003      	b.n	8004960 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004960:	e030      	b.n	80049c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2200      	movs	r2, #0
 800496a:	2180      	movs	r1, #128	@ 0x80
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fc93 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e03d      	b.n	8004a00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004996:	b292      	uxth	r2, r2
 8004998:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	3302      	adds	r3, #2
 800499e:	61bb      	str	r3, [r7, #24]
 80049a0:	e007      	b.n	80049b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1c8      	bne.n	8004962 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2140      	movs	r1, #64	@ 0x40
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fc5c 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e006      	b.n	8004a00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b08c      	sub	sp, #48	@ 0x30
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4baa      	ldr	r3, [pc, #680]	@ (8004ce0 <UART_SetConfig+0x2d8>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a9f      	ldr	r2, [pc, #636]	@ (8004ce4 <UART_SetConfig+0x2dc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	f023 010f 	bic.w	r1, r3, #15
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a90      	ldr	r2, [pc, #576]	@ (8004ce8 <UART_SetConfig+0x2e0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d125      	bne.n	8004af8 <UART_SetConfig+0xf0>
 8004aac:	4b8f      	ldr	r3, [pc, #572]	@ (8004cec <UART_SetConfig+0x2e4>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d81a      	bhi.n	8004af0 <UART_SetConfig+0xe8>
 8004aba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <UART_SetConfig+0xb8>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ae1 	.word	0x08004ae1
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad6:	e116      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ade:	e112      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae6:	e10e      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aee:	e10a      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af6:	e106      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf0 <UART_SetConfig+0x2e8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d138      	bne.n	8004b74 <UART_SetConfig+0x16c>
 8004b02:	4b7a      	ldr	r3, [pc, #488]	@ (8004cec <UART_SetConfig+0x2e4>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d82d      	bhi.n	8004b6c <UART_SetConfig+0x164>
 8004b10:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <UART_SetConfig+0x110>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004b6d 	.word	0x08004b6d
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004b6d 	.word	0x08004b6d
 8004b30:	08004b6d 	.word	0x08004b6d
 8004b34:	08004b6d 	.word	0x08004b6d
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b6d 	.word	0x08004b6d
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b52:	e0d8      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004b54:	2302      	movs	r3, #2
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5a:	e0d4      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b62:	e0d0      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6a:	e0cc      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b72:	e0c8      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5e      	ldr	r2, [pc, #376]	@ (8004cf4 <UART_SetConfig+0x2ec>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d125      	bne.n	8004bca <UART_SetConfig+0x1c2>
 8004b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cec <UART_SetConfig+0x2e4>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b88:	2b30      	cmp	r3, #48	@ 0x30
 8004b8a:	d016      	beq.n	8004bba <UART_SetConfig+0x1b2>
 8004b8c:	2b30      	cmp	r3, #48	@ 0x30
 8004b8e:	d818      	bhi.n	8004bc2 <UART_SetConfig+0x1ba>
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d00a      	beq.n	8004baa <UART_SetConfig+0x1a2>
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d814      	bhi.n	8004bc2 <UART_SetConfig+0x1ba>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <UART_SetConfig+0x19a>
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d008      	beq.n	8004bb2 <UART_SetConfig+0x1aa>
 8004ba0:	e00f      	b.n	8004bc2 <UART_SetConfig+0x1ba>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba8:	e0ad      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004baa:	2302      	movs	r3, #2
 8004bac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb0:	e0a9      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb8:	e0a5      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc0:	e0a1      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc8:	e09d      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf8 <UART_SetConfig+0x2f0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d125      	bne.n	8004c20 <UART_SetConfig+0x218>
 8004bd4:	4b45      	ldr	r3, [pc, #276]	@ (8004cec <UART_SetConfig+0x2e4>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004be0:	d016      	beq.n	8004c10 <UART_SetConfig+0x208>
 8004be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004be4:	d818      	bhi.n	8004c18 <UART_SetConfig+0x210>
 8004be6:	2b80      	cmp	r3, #128	@ 0x80
 8004be8:	d00a      	beq.n	8004c00 <UART_SetConfig+0x1f8>
 8004bea:	2b80      	cmp	r3, #128	@ 0x80
 8004bec:	d814      	bhi.n	8004c18 <UART_SetConfig+0x210>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <UART_SetConfig+0x1f0>
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d008      	beq.n	8004c08 <UART_SetConfig+0x200>
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x210>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfe:	e082      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c06:	e07e      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0e:	e07a      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e076      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e072      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a35      	ldr	r2, [pc, #212]	@ (8004cfc <UART_SetConfig+0x2f4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d12a      	bne.n	8004c80 <UART_SetConfig+0x278>
 8004c2a:	4b30      	ldr	r3, [pc, #192]	@ (8004cec <UART_SetConfig+0x2e4>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c38:	d01a      	beq.n	8004c70 <UART_SetConfig+0x268>
 8004c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c3e:	d81b      	bhi.n	8004c78 <UART_SetConfig+0x270>
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d00c      	beq.n	8004c60 <UART_SetConfig+0x258>
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4a:	d815      	bhi.n	8004c78 <UART_SetConfig+0x270>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <UART_SetConfig+0x250>
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c54:	d008      	beq.n	8004c68 <UART_SetConfig+0x260>
 8004c56:	e00f      	b.n	8004c78 <UART_SetConfig+0x270>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	e052      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c60:	2302      	movs	r3, #2
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c66:	e04e      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e04a      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e046      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e042      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <UART_SetConfig+0x2dc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d13a      	bne.n	8004d00 <UART_SetConfig+0x2f8>
 8004c8a:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <UART_SetConfig+0x2e4>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c98:	d01a      	beq.n	8004cd0 <UART_SetConfig+0x2c8>
 8004c9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9e:	d81b      	bhi.n	8004cd8 <UART_SetConfig+0x2d0>
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca4:	d00c      	beq.n	8004cc0 <UART_SetConfig+0x2b8>
 8004ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004caa:	d815      	bhi.n	8004cd8 <UART_SetConfig+0x2d0>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <UART_SetConfig+0x2b0>
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d008      	beq.n	8004cc8 <UART_SetConfig+0x2c0>
 8004cb6:	e00f      	b.n	8004cd8 <UART_SetConfig+0x2d0>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cbe:	e022      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc6:	e01e      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	e01a      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd6:	e016      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cde:	e012      	b.n	8004d06 <UART_SetConfig+0x2fe>
 8004ce0:	cfff69f3 	.word	0xcfff69f3
 8004ce4:	40008000 	.word	0x40008000
 8004ce8:	40013800 	.word	0x40013800
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40004400 	.word	0x40004400
 8004cf4:	40004800 	.word	0x40004800
 8004cf8:	40004c00 	.word	0x40004c00
 8004cfc:	40005000 	.word	0x40005000
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4aae      	ldr	r2, [pc, #696]	@ (8004fc4 <UART_SetConfig+0x5bc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	f040 8097 	bne.w	8004e40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d823      	bhi.n	8004d62 <UART_SetConfig+0x35a>
 8004d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d20 <UART_SetConfig+0x318>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d63 	.word	0x08004d63
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d63 	.word	0x08004d63
 8004d30:	08004d53 	.word	0x08004d53
 8004d34:	08004d63 	.word	0x08004d63
 8004d38:	08004d63 	.word	0x08004d63
 8004d3c:	08004d63 	.word	0x08004d63
 8004d40:	08004d5b 	.word	0x08004d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7fe fad8 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d4a:	e010      	b.n	8004d6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8004fc8 <UART_SetConfig+0x5c0>)
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d50:	e00d      	b.n	8004d6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d52:	f7fe fa39 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8004d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d58:	e009      	b.n	8004d6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d60:	e005      	b.n	8004d6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8130 	beq.w	8004fd6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	4a94      	ldr	r2, [pc, #592]	@ (8004fcc <UART_SetConfig+0x5c4>)
 8004d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4413      	add	r3, r2
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d305      	bcc.n	8004da6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d903      	bls.n	8004dae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004dac:	e113      	b.n	8004fd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	2200      	movs	r2, #0
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	60fa      	str	r2, [r7, #12]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	4a84      	ldr	r2, [pc, #528]	@ (8004fcc <UART_SetConfig+0x5c4>)
 8004dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dd0:	f7fb fa66 	bl	80002a0 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	020b      	lsls	r3, r1, #8
 8004de6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dea:	0202      	lsls	r2, r0, #8
 8004dec:	6979      	ldr	r1, [r7, #20]
 8004dee:	6849      	ldr	r1, [r1, #4]
 8004df0:	0849      	lsrs	r1, r1, #1
 8004df2:	2000      	movs	r0, #0
 8004df4:	460c      	mov	r4, r1
 8004df6:	4605      	mov	r5, r0
 8004df8:	eb12 0804 	adds.w	r8, r2, r4
 8004dfc:	eb43 0905 	adc.w	r9, r3, r5
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	469a      	mov	sl, r3
 8004e08:	4693      	mov	fp, r2
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	465b      	mov	r3, fp
 8004e0e:	4640      	mov	r0, r8
 8004e10:	4649      	mov	r1, r9
 8004e12:	f7fb fa45 	bl	80002a0 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e24:	d308      	bcc.n	8004e38 <UART_SetConfig+0x430>
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e2c:	d204      	bcs.n	8004e38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a3a      	ldr	r2, [r7, #32]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e0ce      	b.n	8004fd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e3e:	e0ca      	b.n	8004fd6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e48:	d166      	bne.n	8004f18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d827      	bhi.n	8004ea2 <UART_SetConfig+0x49a>
 8004e52:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <UART_SetConfig+0x450>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e93 	.word	0x08004e93
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004ea3 	.word	0x08004ea3
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fe fa3c 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004e80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e82:	e014      	b.n	8004eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fe fa4e 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8004e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e8a:	e010      	b.n	8004eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b4e      	ldr	r3, [pc, #312]	@ (8004fc8 <UART_SetConfig+0x5c0>)
 8004e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e90:	e00d      	b.n	8004eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fe f999 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ea0:	e005      	b.n	8004eae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8090 	beq.w	8004fd6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	4a44      	ldr	r2, [pc, #272]	@ (8004fcc <UART_SetConfig+0x5c4>)
 8004ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec8:	005a      	lsls	r2, r3, #1
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	441a      	add	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d916      	bls.n	8004f10 <UART_SetConfig+0x508>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d212      	bcs.n	8004f10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f023 030f 	bic.w	r3, r3, #15
 8004ef2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	8bfb      	ldrh	r3, [r7, #30]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	8bfa      	ldrh	r2, [r7, #30]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e062      	b.n	8004fd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f16:	e05e      	b.n	8004fd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d828      	bhi.n	8004f72 <UART_SetConfig+0x56a>
 8004f20:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <UART_SetConfig+0x520>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f55 	.word	0x08004f55
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f73 	.word	0x08004f73
 8004f38:	08004f63 	.word	0x08004f63
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004f73 	.word	0x08004f73
 8004f44:	08004f73 	.word	0x08004f73
 8004f48:	08004f6b 	.word	0x08004f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7fe f9d4 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f52:	e014      	b.n	8004f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7fe f9e6 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8004f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f5a:	e010      	b.n	8004f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <UART_SetConfig+0x5c0>)
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f60:	e00d      	b.n	8004f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7fe f931 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8004f66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f68:	e009      	b.n	8004f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f70:	e005      	b.n	8004f7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d028      	beq.n	8004fd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	4a10      	ldr	r2, [pc, #64]	@ (8004fcc <UART_SetConfig+0x5c4>)
 8004f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	441a      	add	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b0f      	cmp	r3, #15
 8004fac:	d910      	bls.n	8004fd0 <UART_SetConfig+0x5c8>
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb4:	d20c      	bcs.n	8004fd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	e009      	b.n	8004fd6 <UART_SetConfig+0x5ce>
 8004fc2:	bf00      	nop
 8004fc4:	40008000 	.word	0x40008000
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	0800658c 	.word	0x0800658c
      }
      else
      {
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ff2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	@ 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01a      	beq.n	8005116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050fe:	d10a      	bne.n	8005116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b098      	sub	sp, #96	@ 0x60
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005154:	f7fc f960 	bl	8001418 <HAL_GetTick>
 8005158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d12f      	bne.n	80051c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005170:	2200      	movs	r2, #0
 8005172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f88e 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d022      	beq.n	80051c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005196:	653b      	str	r3, [r7, #80]	@ 0x50
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e063      	b.n	8005290 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d149      	bne.n	800526a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f857 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d03c      	beq.n	800526a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	623b      	str	r3, [r7, #32]
   return(result);
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800520e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005210:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	60fb      	str	r3, [r7, #12]
   return(result);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005242:	61fa      	str	r2, [r7, #28]
 8005244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	69b9      	ldr	r1, [r7, #24]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	617b      	str	r3, [r7, #20]
   return(result);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e012      	b.n	8005290 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3758      	adds	r7, #88	@ 0x58
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	e04f      	b.n	800534a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d04b      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fc f8b1 	bl	8001418 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e04e      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d037      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b80      	cmp	r3, #128	@ 0x80
 80052de:	d034      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b40      	cmp	r3, #64	@ 0x40
 80052e4:	d031      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d110      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2208      	movs	r2, #8
 80052fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f838 	bl	8005372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2208      	movs	r2, #8
 8005306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e029      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005324:	d111      	bne.n	800534a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800532e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f81e 	bl	8005372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e00f      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	429a      	cmp	r2, r3
 8005366:	d0a0      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005372:	b480      	push	{r7}
 8005374:	b095      	sub	sp, #84	@ 0x54
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005398:	643b      	str	r3, [r7, #64]	@ 0x40
 800539a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800539e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d8:	e841 2300 	strex	r3, r2, [r1]
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e3      	bne.n	80053ac <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d118      	bne.n	800541e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0310 	bic.w	r3, r3, #16
 8005400:	647b      	str	r3, [r7, #68]	@ 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	613b      	str	r3, [r7, #16]
   return(result);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e6      	bne.n	80053ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005432:	bf00      	nop
 8005434:	3754      	adds	r7, #84	@ 0x54
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_UARTEx_DisableFifoMode+0x16>
 8005450:	2302      	movs	r3, #2
 8005452:	e027      	b.n	80054a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	@ 0x24
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005482:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2220      	movs	r2, #32
 8005496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e02d      	b.n	8005524 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	@ 0x24
 80054d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f84f 	bl	80055a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e02d      	b.n	80055a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2224      	movs	r2, #36	@ 0x24
 8005550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f811 	bl	80055a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d108      	bne.n	80055ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055c8:	e031      	b.n	800562e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055ca:	2308      	movs	r3, #8
 80055cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055ce:	2308      	movs	r3, #8
 80055d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	0e5b      	lsrs	r3, r3, #25
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	0f5b      	lsrs	r3, r3, #29
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055f2:	7bbb      	ldrb	r3, [r7, #14]
 80055f4:	7b3a      	ldrb	r2, [r7, #12]
 80055f6:	4911      	ldr	r1, [pc, #68]	@ (800563c <UARTEx_SetNbDataToProcess+0x94>)
 80055f8:	5c8a      	ldrb	r2, [r1, r2]
 80055fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055fe:	7b3a      	ldrb	r2, [r7, #12]
 8005600:	490f      	ldr	r1, [pc, #60]	@ (8005640 <UARTEx_SetNbDataToProcess+0x98>)
 8005602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005604:	fb93 f3f2 	sdiv	r3, r3, r2
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	7b7a      	ldrb	r2, [r7, #13]
 8005614:	4909      	ldr	r1, [pc, #36]	@ (800563c <UARTEx_SetNbDataToProcess+0x94>)
 8005616:	5c8a      	ldrb	r2, [r1, r2]
 8005618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800561c:	7b7a      	ldrb	r2, [r7, #13]
 800561e:	4908      	ldr	r1, [pc, #32]	@ (8005640 <UARTEx_SetNbDataToProcess+0x98>)
 8005620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005622:	fb93 f3f2 	sdiv	r3, r3, r2
 8005626:	b29a      	uxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	080065a4 	.word	0x080065a4
 8005640:	080065ac 	.word	0x080065ac

08005644 <exit>:
 8005644:	b508      	push	{r3, lr}
 8005646:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <exit+0x1c>)
 8005648:	4604      	mov	r4, r0
 800564a:	b113      	cbz	r3, 8005652 <exit+0xe>
 800564c:	2100      	movs	r1, #0
 800564e:	f3af 8000 	nop.w
 8005652:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <exit+0x20>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b103      	cbz	r3, 800565a <exit+0x16>
 8005658:	4798      	blx	r3
 800565a:	4620      	mov	r0, r4
 800565c:	f7fb fd8a 	bl	8001174 <_exit>
 8005660:	00000000 	.word	0x00000000
 8005664:	200402fc 	.word	0x200402fc

08005668 <std>:
 8005668:	2300      	movs	r3, #0
 800566a:	b510      	push	{r4, lr}
 800566c:	4604      	mov	r4, r0
 800566e:	e9c0 3300 	strd	r3, r3, [r0]
 8005672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005676:	6083      	str	r3, [r0, #8]
 8005678:	8181      	strh	r1, [r0, #12]
 800567a:	6643      	str	r3, [r0, #100]	@ 0x64
 800567c:	81c2      	strh	r2, [r0, #14]
 800567e:	6183      	str	r3, [r0, #24]
 8005680:	4619      	mov	r1, r3
 8005682:	2208      	movs	r2, #8
 8005684:	305c      	adds	r0, #92	@ 0x5c
 8005686:	f000 f906 	bl	8005896 <memset>
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x58>)
 800568c:	6263      	str	r3, [r4, #36]	@ 0x24
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <std+0x5c>)
 8005690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <std+0x60>)
 8005694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005696:	4b0d      	ldr	r3, [pc, #52]	@ (80056cc <std+0x64>)
 8005698:	6323      	str	r3, [r4, #48]	@ 0x30
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <std+0x68>)
 800569c:	6224      	str	r4, [r4, #32]
 800569e:	429c      	cmp	r4, r3
 80056a0:	d006      	beq.n	80056b0 <std+0x48>
 80056a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056a6:	4294      	cmp	r4, r2
 80056a8:	d002      	beq.n	80056b0 <std+0x48>
 80056aa:	33d0      	adds	r3, #208	@ 0xd0
 80056ac:	429c      	cmp	r4, r3
 80056ae:	d105      	bne.n	80056bc <std+0x54>
 80056b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b8:	f000 b966 	b.w	8005988 <__retarget_lock_init_recursive>
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	bf00      	nop
 80056c0:	08005811 	.word	0x08005811
 80056c4:	08005833 	.word	0x08005833
 80056c8:	0800586b 	.word	0x0800586b
 80056cc:	0800588f 	.word	0x0800588f
 80056d0:	200401c4 	.word	0x200401c4

080056d4 <stdio_exit_handler>:
 80056d4:	4a02      	ldr	r2, [pc, #8]	@ (80056e0 <stdio_exit_handler+0xc>)
 80056d6:	4903      	ldr	r1, [pc, #12]	@ (80056e4 <stdio_exit_handler+0x10>)
 80056d8:	4803      	ldr	r0, [pc, #12]	@ (80056e8 <stdio_exit_handler+0x14>)
 80056da:	f000 b869 	b.w	80057b0 <_fwalk_sglue>
 80056de:	bf00      	nop
 80056e0:	2004000c 	.word	0x2004000c
 80056e4:	08006229 	.word	0x08006229
 80056e8:	2004001c 	.word	0x2004001c

080056ec <cleanup_stdio>:
 80056ec:	6841      	ldr	r1, [r0, #4]
 80056ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005720 <cleanup_stdio+0x34>)
 80056f0:	4299      	cmp	r1, r3
 80056f2:	b510      	push	{r4, lr}
 80056f4:	4604      	mov	r4, r0
 80056f6:	d001      	beq.n	80056fc <cleanup_stdio+0x10>
 80056f8:	f000 fd96 	bl	8006228 <_fflush_r>
 80056fc:	68a1      	ldr	r1, [r4, #8]
 80056fe:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <cleanup_stdio+0x38>)
 8005700:	4299      	cmp	r1, r3
 8005702:	d002      	beq.n	800570a <cleanup_stdio+0x1e>
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fd8f 	bl	8006228 <_fflush_r>
 800570a:	68e1      	ldr	r1, [r4, #12]
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <cleanup_stdio+0x3c>)
 800570e:	4299      	cmp	r1, r3
 8005710:	d004      	beq.n	800571c <cleanup_stdio+0x30>
 8005712:	4620      	mov	r0, r4
 8005714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005718:	f000 bd86 	b.w	8006228 <_fflush_r>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop
 8005720:	200401c4 	.word	0x200401c4
 8005724:	2004022c 	.word	0x2004022c
 8005728:	20040294 	.word	0x20040294

0800572c <global_stdio_init.part.0>:
 800572c:	b510      	push	{r4, lr}
 800572e:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <global_stdio_init.part.0+0x30>)
 8005730:	4c0b      	ldr	r4, [pc, #44]	@ (8005760 <global_stdio_init.part.0+0x34>)
 8005732:	4a0c      	ldr	r2, [pc, #48]	@ (8005764 <global_stdio_init.part.0+0x38>)
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	4620      	mov	r0, r4
 8005738:	2200      	movs	r2, #0
 800573a:	2104      	movs	r1, #4
 800573c:	f7ff ff94 	bl	8005668 <std>
 8005740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005744:	2201      	movs	r2, #1
 8005746:	2109      	movs	r1, #9
 8005748:	f7ff ff8e 	bl	8005668 <std>
 800574c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005750:	2202      	movs	r2, #2
 8005752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005756:	2112      	movs	r1, #18
 8005758:	f7ff bf86 	b.w	8005668 <std>
 800575c:	200402fc 	.word	0x200402fc
 8005760:	200401c4 	.word	0x200401c4
 8005764:	080056d5 	.word	0x080056d5

08005768 <__sfp_lock_acquire>:
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <__sfp_lock_acquire+0x8>)
 800576a:	f000 b90e 	b.w	800598a <__retarget_lock_acquire_recursive>
 800576e:	bf00      	nop
 8005770:	20040305 	.word	0x20040305

08005774 <__sfp_lock_release>:
 8005774:	4801      	ldr	r0, [pc, #4]	@ (800577c <__sfp_lock_release+0x8>)
 8005776:	f000 b909 	b.w	800598c <__retarget_lock_release_recursive>
 800577a:	bf00      	nop
 800577c:	20040305 	.word	0x20040305

08005780 <__sinit>:
 8005780:	b510      	push	{r4, lr}
 8005782:	4604      	mov	r4, r0
 8005784:	f7ff fff0 	bl	8005768 <__sfp_lock_acquire>
 8005788:	6a23      	ldr	r3, [r4, #32]
 800578a:	b11b      	cbz	r3, 8005794 <__sinit+0x14>
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	f7ff bff0 	b.w	8005774 <__sfp_lock_release>
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <__sinit+0x28>)
 8005796:	6223      	str	r3, [r4, #32]
 8005798:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <__sinit+0x2c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f5      	bne.n	800578c <__sinit+0xc>
 80057a0:	f7ff ffc4 	bl	800572c <global_stdio_init.part.0>
 80057a4:	e7f2      	b.n	800578c <__sinit+0xc>
 80057a6:	bf00      	nop
 80057a8:	080056ed 	.word	0x080056ed
 80057ac:	200402fc 	.word	0x200402fc

080057b0 <_fwalk_sglue>:
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	4607      	mov	r7, r0
 80057b6:	4688      	mov	r8, r1
 80057b8:	4614      	mov	r4, r2
 80057ba:	2600      	movs	r6, #0
 80057bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057c0:	f1b9 0901 	subs.w	r9, r9, #1
 80057c4:	d505      	bpl.n	80057d2 <_fwalk_sglue+0x22>
 80057c6:	6824      	ldr	r4, [r4, #0]
 80057c8:	2c00      	cmp	r4, #0
 80057ca:	d1f7      	bne.n	80057bc <_fwalk_sglue+0xc>
 80057cc:	4630      	mov	r0, r6
 80057ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d907      	bls.n	80057e8 <_fwalk_sglue+0x38>
 80057d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057dc:	3301      	adds	r3, #1
 80057de:	d003      	beq.n	80057e8 <_fwalk_sglue+0x38>
 80057e0:	4629      	mov	r1, r5
 80057e2:	4638      	mov	r0, r7
 80057e4:	47c0      	blx	r8
 80057e6:	4306      	orrs	r6, r0
 80057e8:	3568      	adds	r5, #104	@ 0x68
 80057ea:	e7e9      	b.n	80057c0 <_fwalk_sglue+0x10>

080057ec <iprintf>:
 80057ec:	b40f      	push	{r0, r1, r2, r3}
 80057ee:	b507      	push	{r0, r1, r2, lr}
 80057f0:	4906      	ldr	r1, [pc, #24]	@ (800580c <iprintf+0x20>)
 80057f2:	ab04      	add	r3, sp, #16
 80057f4:	6808      	ldr	r0, [r1, #0]
 80057f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fa:	6881      	ldr	r1, [r0, #8]
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	f000 f9e9 	bl	8005bd4 <_vfiprintf_r>
 8005802:	b003      	add	sp, #12
 8005804:	f85d eb04 	ldr.w	lr, [sp], #4
 8005808:	b004      	add	sp, #16
 800580a:	4770      	bx	lr
 800580c:	20040018 	.word	0x20040018

08005810 <__sread>:
 8005810:	b510      	push	{r4, lr}
 8005812:	460c      	mov	r4, r1
 8005814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005818:	f000 f868 	bl	80058ec <_read_r>
 800581c:	2800      	cmp	r0, #0
 800581e:	bfab      	itete	ge
 8005820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005822:	89a3      	ldrhlt	r3, [r4, #12]
 8005824:	181b      	addge	r3, r3, r0
 8005826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800582a:	bfac      	ite	ge
 800582c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800582e:	81a3      	strhlt	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__swrite>:
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	461f      	mov	r7, r3
 8005838:	898b      	ldrh	r3, [r1, #12]
 800583a:	05db      	lsls	r3, r3, #23
 800583c:	4605      	mov	r5, r0
 800583e:	460c      	mov	r4, r1
 8005840:	4616      	mov	r6, r2
 8005842:	d505      	bpl.n	8005850 <__swrite+0x1e>
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	2302      	movs	r3, #2
 800584a:	2200      	movs	r2, #0
 800584c:	f000 f83c 	bl	80058c8 <_lseek_r>
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005856:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	4628      	mov	r0, r5
 8005862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	f000 b853 	b.w	8005910 <_write_r>

0800586a <__sseek>:
 800586a:	b510      	push	{r4, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005872:	f000 f829 	bl	80058c8 <_lseek_r>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	bf15      	itete	ne
 800587c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800587e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005886:	81a3      	strheq	r3, [r4, #12]
 8005888:	bf18      	it	ne
 800588a:	81a3      	strhne	r3, [r4, #12]
 800588c:	bd10      	pop	{r4, pc}

0800588e <__sclose>:
 800588e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005892:	f000 b809 	b.w	80058a8 <_close_r>

08005896 <memset>:
 8005896:	4402      	add	r2, r0
 8005898:	4603      	mov	r3, r0
 800589a:	4293      	cmp	r3, r2
 800589c:	d100      	bne.n	80058a0 <memset+0xa>
 800589e:	4770      	bx	lr
 80058a0:	f803 1b01 	strb.w	r1, [r3], #1
 80058a4:	e7f9      	b.n	800589a <memset+0x4>
	...

080058a8 <_close_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d06      	ldr	r5, [pc, #24]	@ (80058c4 <_close_r+0x1c>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f7fb fca2 	bl	80011fc <_close>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_close_r+0x1a>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_close_r+0x1a>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20040300 	.word	0x20040300

080058c8 <_lseek_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d07      	ldr	r5, [pc, #28]	@ (80058e8 <_lseek_r+0x20>)
 80058cc:	4604      	mov	r4, r0
 80058ce:	4608      	mov	r0, r1
 80058d0:	4611      	mov	r1, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	602a      	str	r2, [r5, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f7fb fcb7 	bl	800124a <_lseek>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_lseek_r+0x1e>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_lseek_r+0x1e>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	20040300 	.word	0x20040300

080058ec <_read_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d07      	ldr	r5, [pc, #28]	@ (800590c <_read_r+0x20>)
 80058f0:	4604      	mov	r4, r0
 80058f2:	4608      	mov	r0, r1
 80058f4:	4611      	mov	r1, r2
 80058f6:	2200      	movs	r2, #0
 80058f8:	602a      	str	r2, [r5, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f7fb fc45 	bl	800118a <_read>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_read_r+0x1e>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_read_r+0x1e>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20040300 	.word	0x20040300

08005910 <_write_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	@ (8005930 <_write_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fb fc50 	bl	80011c4 <_write>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_write_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_write_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20040300 	.word	0x20040300

08005934 <__errno>:
 8005934:	4b01      	ldr	r3, [pc, #4]	@ (800593c <__errno+0x8>)
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20040018 	.word	0x20040018

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4d0d      	ldr	r5, [pc, #52]	@ (8005978 <__libc_init_array+0x38>)
 8005944:	4c0d      	ldr	r4, [pc, #52]	@ (800597c <__libc_init_array+0x3c>)
 8005946:	1b64      	subs	r4, r4, r5
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	2600      	movs	r6, #0
 800594c:	42a6      	cmp	r6, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	4d0b      	ldr	r5, [pc, #44]	@ (8005980 <__libc_init_array+0x40>)
 8005952:	4c0c      	ldr	r4, [pc, #48]	@ (8005984 <__libc_init_array+0x44>)
 8005954:	f000 fdb8 	bl	80064c8 <_init>
 8005958:	1b64      	subs	r4, r4, r5
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	2600      	movs	r6, #0
 800595e:	42a6      	cmp	r6, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f855 3b04 	ldr.w	r3, [r5], #4
 8005968:	4798      	blx	r3
 800596a:	3601      	adds	r6, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005972:	4798      	blx	r3
 8005974:	3601      	adds	r6, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	080065f0 	.word	0x080065f0
 800597c:	080065f0 	.word	0x080065f0
 8005980:	080065f0 	.word	0x080065f0
 8005984:	080065f4 	.word	0x080065f4

08005988 <__retarget_lock_init_recursive>:
 8005988:	4770      	bx	lr

0800598a <__retarget_lock_acquire_recursive>:
 800598a:	4770      	bx	lr

0800598c <__retarget_lock_release_recursive>:
 800598c:	4770      	bx	lr
	...

08005990 <_free_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4605      	mov	r5, r0
 8005994:	2900      	cmp	r1, #0
 8005996:	d041      	beq.n	8005a1c <_free_r+0x8c>
 8005998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599c:	1f0c      	subs	r4, r1, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfb8      	it	lt
 80059a2:	18e4      	addlt	r4, r4, r3
 80059a4:	f000 f8e0 	bl	8005b68 <__malloc_lock>
 80059a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a20 <_free_r+0x90>)
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	b933      	cbnz	r3, 80059bc <_free_r+0x2c>
 80059ae:	6063      	str	r3, [r4, #4]
 80059b0:	6014      	str	r4, [r2, #0]
 80059b2:	4628      	mov	r0, r5
 80059b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b8:	f000 b8dc 	b.w	8005b74 <__malloc_unlock>
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d908      	bls.n	80059d2 <_free_r+0x42>
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	1821      	adds	r1, r4, r0
 80059c4:	428b      	cmp	r3, r1
 80059c6:	bf01      	itttt	eq
 80059c8:	6819      	ldreq	r1, [r3, #0]
 80059ca:	685b      	ldreq	r3, [r3, #4]
 80059cc:	1809      	addeq	r1, r1, r0
 80059ce:	6021      	streq	r1, [r4, #0]
 80059d0:	e7ed      	b.n	80059ae <_free_r+0x1e>
 80059d2:	461a      	mov	r2, r3
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b10b      	cbz	r3, 80059dc <_free_r+0x4c>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d9fa      	bls.n	80059d2 <_free_r+0x42>
 80059dc:	6811      	ldr	r1, [r2, #0]
 80059de:	1850      	adds	r0, r2, r1
 80059e0:	42a0      	cmp	r0, r4
 80059e2:	d10b      	bne.n	80059fc <_free_r+0x6c>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	4401      	add	r1, r0
 80059e8:	1850      	adds	r0, r2, r1
 80059ea:	4283      	cmp	r3, r0
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	d1e0      	bne.n	80059b2 <_free_r+0x22>
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	6053      	str	r3, [r2, #4]
 80059f6:	4408      	add	r0, r1
 80059f8:	6010      	str	r0, [r2, #0]
 80059fa:	e7da      	b.n	80059b2 <_free_r+0x22>
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x74>
 80059fe:	230c      	movs	r3, #12
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	e7d6      	b.n	80059b2 <_free_r+0x22>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	1821      	adds	r1, r4, r0
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	bf04      	itt	eq
 8005a0c:	6819      	ldreq	r1, [r3, #0]
 8005a0e:	685b      	ldreq	r3, [r3, #4]
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	bf04      	itt	eq
 8005a14:	1809      	addeq	r1, r1, r0
 8005a16:	6021      	streq	r1, [r4, #0]
 8005a18:	6054      	str	r4, [r2, #4]
 8005a1a:	e7ca      	b.n	80059b2 <_free_r+0x22>
 8005a1c:	bd38      	pop	{r3, r4, r5, pc}
 8005a1e:	bf00      	nop
 8005a20:	2004030c 	.word	0x2004030c

08005a24 <sbrk_aligned>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4e0f      	ldr	r6, [pc, #60]	@ (8005a64 <sbrk_aligned+0x40>)
 8005a28:	460c      	mov	r4, r1
 8005a2a:	6831      	ldr	r1, [r6, #0]
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	b911      	cbnz	r1, 8005a36 <sbrk_aligned+0x12>
 8005a30:	f000 fcb6 	bl	80063a0 <_sbrk_r>
 8005a34:	6030      	str	r0, [r6, #0]
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 fcb1 	bl	80063a0 <_sbrk_r>
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d103      	bne.n	8005a4a <sbrk_aligned+0x26>
 8005a42:	f04f 34ff 	mov.w	r4, #4294967295
 8005a46:	4620      	mov	r0, r4
 8005a48:	bd70      	pop	{r4, r5, r6, pc}
 8005a4a:	1cc4      	adds	r4, r0, #3
 8005a4c:	f024 0403 	bic.w	r4, r4, #3
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d0f8      	beq.n	8005a46 <sbrk_aligned+0x22>
 8005a54:	1a21      	subs	r1, r4, r0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fca2 	bl	80063a0 <_sbrk_r>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d1f2      	bne.n	8005a46 <sbrk_aligned+0x22>
 8005a60:	e7ef      	b.n	8005a42 <sbrk_aligned+0x1e>
 8005a62:	bf00      	nop
 8005a64:	20040308 	.word	0x20040308

08005a68 <_malloc_r>:
 8005a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	1ccd      	adds	r5, r1, #3
 8005a6e:	f025 0503 	bic.w	r5, r5, #3
 8005a72:	3508      	adds	r5, #8
 8005a74:	2d0c      	cmp	r5, #12
 8005a76:	bf38      	it	cc
 8005a78:	250c      	movcc	r5, #12
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	db01      	blt.n	8005a84 <_malloc_r+0x1c>
 8005a80:	42a9      	cmp	r1, r5
 8005a82:	d904      	bls.n	8005a8e <_malloc_r+0x26>
 8005a84:	230c      	movs	r3, #12
 8005a86:	6033      	str	r3, [r6, #0]
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b64 <_malloc_r+0xfc>
 8005a92:	f000 f869 	bl	8005b68 <__malloc_lock>
 8005a96:	f8d8 3000 	ldr.w	r3, [r8]
 8005a9a:	461c      	mov	r4, r3
 8005a9c:	bb44      	cbnz	r4, 8005af0 <_malloc_r+0x88>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff ffbf 	bl	8005a24 <sbrk_aligned>
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	d158      	bne.n	8005b5e <_malloc_r+0xf6>
 8005aac:	f8d8 4000 	ldr.w	r4, [r8]
 8005ab0:	4627      	mov	r7, r4
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	d143      	bne.n	8005b3e <_malloc_r+0xd6>
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	d04b      	beq.n	8005b52 <_malloc_r+0xea>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	4639      	mov	r1, r7
 8005abe:	4630      	mov	r0, r6
 8005ac0:	eb04 0903 	add.w	r9, r4, r3
 8005ac4:	f000 fc6c 	bl	80063a0 <_sbrk_r>
 8005ac8:	4581      	cmp	r9, r0
 8005aca:	d142      	bne.n	8005b52 <_malloc_r+0xea>
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	1a6d      	subs	r5, r5, r1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff ffa6 	bl	8005a24 <sbrk_aligned>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d03a      	beq.n	8005b52 <_malloc_r+0xea>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	442b      	add	r3, r5
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	bb62      	cbnz	r2, 8005b44 <_malloc_r+0xdc>
 8005aea:	f8c8 7000 	str.w	r7, [r8]
 8005aee:	e00f      	b.n	8005b10 <_malloc_r+0xa8>
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	1b52      	subs	r2, r2, r5
 8005af4:	d420      	bmi.n	8005b38 <_malloc_r+0xd0>
 8005af6:	2a0b      	cmp	r2, #11
 8005af8:	d917      	bls.n	8005b2a <_malloc_r+0xc2>
 8005afa:	1961      	adds	r1, r4, r5
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	6025      	str	r5, [r4, #0]
 8005b00:	bf18      	it	ne
 8005b02:	6059      	strne	r1, [r3, #4]
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	bf08      	it	eq
 8005b08:	f8c8 1000 	streq.w	r1, [r8]
 8005b0c:	5162      	str	r2, [r4, r5]
 8005b0e:	604b      	str	r3, [r1, #4]
 8005b10:	4630      	mov	r0, r6
 8005b12:	f000 f82f 	bl	8005b74 <__malloc_unlock>
 8005b16:	f104 000b 	add.w	r0, r4, #11
 8005b1a:	1d23      	adds	r3, r4, #4
 8005b1c:	f020 0007 	bic.w	r0, r0, #7
 8005b20:	1ac2      	subs	r2, r0, r3
 8005b22:	bf1c      	itt	ne
 8005b24:	1a1b      	subne	r3, r3, r0
 8005b26:	50a3      	strne	r3, [r4, r2]
 8005b28:	e7af      	b.n	8005a8a <_malloc_r+0x22>
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	bf0c      	ite	eq
 8005b30:	f8c8 2000 	streq.w	r2, [r8]
 8005b34:	605a      	strne	r2, [r3, #4]
 8005b36:	e7eb      	b.n	8005b10 <_malloc_r+0xa8>
 8005b38:	4623      	mov	r3, r4
 8005b3a:	6864      	ldr	r4, [r4, #4]
 8005b3c:	e7ae      	b.n	8005a9c <_malloc_r+0x34>
 8005b3e:	463c      	mov	r4, r7
 8005b40:	687f      	ldr	r7, [r7, #4]
 8005b42:	e7b6      	b.n	8005ab2 <_malloc_r+0x4a>
 8005b44:	461a      	mov	r2, r3
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	d1fb      	bne.n	8005b44 <_malloc_r+0xdc>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6053      	str	r3, [r2, #4]
 8005b50:	e7de      	b.n	8005b10 <_malloc_r+0xa8>
 8005b52:	230c      	movs	r3, #12
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 f80c 	bl	8005b74 <__malloc_unlock>
 8005b5c:	e794      	b.n	8005a88 <_malloc_r+0x20>
 8005b5e:	6005      	str	r5, [r0, #0]
 8005b60:	e7d6      	b.n	8005b10 <_malloc_r+0xa8>
 8005b62:	bf00      	nop
 8005b64:	2004030c 	.word	0x2004030c

08005b68 <__malloc_lock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	@ (8005b70 <__malloc_lock+0x8>)
 8005b6a:	f7ff bf0e 	b.w	800598a <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	20040304 	.word	0x20040304

08005b74 <__malloc_unlock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	@ (8005b7c <__malloc_unlock+0x8>)
 8005b76:	f7ff bf09 	b.w	800598c <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	20040304 	.word	0x20040304

08005b80 <__sfputc_r>:
 8005b80:	6893      	ldr	r3, [r2, #8]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	b410      	push	{r4}
 8005b88:	6093      	str	r3, [r2, #8]
 8005b8a:	da08      	bge.n	8005b9e <__sfputc_r+0x1e>
 8005b8c:	6994      	ldr	r4, [r2, #24]
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	db01      	blt.n	8005b96 <__sfputc_r+0x16>
 8005b92:	290a      	cmp	r1, #10
 8005b94:	d103      	bne.n	8005b9e <__sfputc_r+0x1e>
 8005b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b9a:	f000 bb6d 	b.w	8006278 <__swbuf_r>
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	1c58      	adds	r0, r3, #1
 8005ba2:	6010      	str	r0, [r2, #0]
 8005ba4:	7019      	strb	r1, [r3, #0]
 8005ba6:	4608      	mov	r0, r1
 8005ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <__sfputs_r>:
 8005bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	460f      	mov	r7, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	18d5      	adds	r5, r2, r3
 8005bb8:	42ac      	cmp	r4, r5
 8005bba:	d101      	bne.n	8005bc0 <__sfputs_r+0x12>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e007      	b.n	8005bd0 <__sfputs_r+0x22>
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	463a      	mov	r2, r7
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ffda 	bl	8005b80 <__sfputc_r>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d1f3      	bne.n	8005bb8 <__sfputs_r+0xa>
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bd4 <_vfiprintf_r>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	460d      	mov	r5, r1
 8005bda:	b09d      	sub	sp, #116	@ 0x74
 8005bdc:	4614      	mov	r4, r2
 8005bde:	4698      	mov	r8, r3
 8005be0:	4606      	mov	r6, r0
 8005be2:	b118      	cbz	r0, 8005bec <_vfiprintf_r+0x18>
 8005be4:	6a03      	ldr	r3, [r0, #32]
 8005be6:	b90b      	cbnz	r3, 8005bec <_vfiprintf_r+0x18>
 8005be8:	f7ff fdca 	bl	8005780 <__sinit>
 8005bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bee:	07d9      	lsls	r1, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_vfiprintf_r+0x2a>
 8005bf2:	89ab      	ldrh	r3, [r5, #12]
 8005bf4:	059a      	lsls	r2, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_vfiprintf_r+0x2a>
 8005bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bfa:	f7ff fec6 	bl	800598a <__retarget_lock_acquire_recursive>
 8005bfe:	89ab      	ldrh	r3, [r5, #12]
 8005c00:	071b      	lsls	r3, r3, #28
 8005c02:	d501      	bpl.n	8005c08 <_vfiprintf_r+0x34>
 8005c04:	692b      	ldr	r3, [r5, #16]
 8005c06:	b99b      	cbnz	r3, 8005c30 <_vfiprintf_r+0x5c>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f000 fb72 	bl	80062f4 <__swsetup_r>
 8005c10:	b170      	cbz	r0, 8005c30 <_vfiprintf_r+0x5c>
 8005c12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c14:	07dc      	lsls	r4, r3, #31
 8005c16:	d504      	bpl.n	8005c22 <_vfiprintf_r+0x4e>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	b01d      	add	sp, #116	@ 0x74
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	0598      	lsls	r0, r3, #22
 8005c26:	d4f7      	bmi.n	8005c18 <_vfiprintf_r+0x44>
 8005c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c2a:	f7ff feaf 	bl	800598c <__retarget_lock_release_recursive>
 8005c2e:	e7f3      	b.n	8005c18 <_vfiprintf_r+0x44>
 8005c30:	2300      	movs	r3, #0
 8005c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c34:	2320      	movs	r3, #32
 8005c36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c3e:	2330      	movs	r3, #48	@ 0x30
 8005c40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005df0 <_vfiprintf_r+0x21c>
 8005c44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c48:	f04f 0901 	mov.w	r9, #1
 8005c4c:	4623      	mov	r3, r4
 8005c4e:	469a      	mov	sl, r3
 8005c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c54:	b10a      	cbz	r2, 8005c5a <_vfiprintf_r+0x86>
 8005c56:	2a25      	cmp	r2, #37	@ 0x25
 8005c58:	d1f9      	bne.n	8005c4e <_vfiprintf_r+0x7a>
 8005c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c5e:	d00b      	beq.n	8005c78 <_vfiprintf_r+0xa4>
 8005c60:	465b      	mov	r3, fp
 8005c62:	4622      	mov	r2, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ffa1 	bl	8005bae <__sfputs_r>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f000 80a7 	beq.w	8005dc0 <_vfiprintf_r+0x1ec>
 8005c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c74:	445a      	add	r2, fp
 8005c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c78:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 809f 	beq.w	8005dc0 <_vfiprintf_r+0x1ec>
 8005c82:	2300      	movs	r3, #0
 8005c84:	f04f 32ff 	mov.w	r2, #4294967295
 8005c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c8c:	f10a 0a01 	add.w	sl, sl, #1
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	9307      	str	r3, [sp, #28]
 8005c94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c98:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c9a:	4654      	mov	r4, sl
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca2:	4853      	ldr	r0, [pc, #332]	@ (8005df0 <_vfiprintf_r+0x21c>)
 8005ca4:	f7fa faac 	bl	8000200 <memchr>
 8005ca8:	9a04      	ldr	r2, [sp, #16]
 8005caa:	b9d8      	cbnz	r0, 8005ce4 <_vfiprintf_r+0x110>
 8005cac:	06d1      	lsls	r1, r2, #27
 8005cae:	bf44      	itt	mi
 8005cb0:	2320      	movmi	r3, #32
 8005cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb6:	0713      	lsls	r3, r2, #28
 8005cb8:	bf44      	itt	mi
 8005cba:	232b      	movmi	r3, #43	@ 0x2b
 8005cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc6:	d015      	beq.n	8005cf4 <_vfiprintf_r+0x120>
 8005cc8:	9a07      	ldr	r2, [sp, #28]
 8005cca:	4654      	mov	r4, sl
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f04f 0c0a 	mov.w	ip, #10
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd8:	3b30      	subs	r3, #48	@ 0x30
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d94b      	bls.n	8005d76 <_vfiprintf_r+0x1a2>
 8005cde:	b1b0      	cbz	r0, 8005d0e <_vfiprintf_r+0x13a>
 8005ce0:	9207      	str	r2, [sp, #28]
 8005ce2:	e014      	b.n	8005d0e <_vfiprintf_r+0x13a>
 8005ce4:	eba0 0308 	sub.w	r3, r0, r8
 8005ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	46a2      	mov	sl, r4
 8005cf2:	e7d2      	b.n	8005c9a <_vfiprintf_r+0xc6>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1d19      	adds	r1, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	9103      	str	r1, [sp, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfbb      	ittet	lt
 8005d00:	425b      	neglt	r3, r3
 8005d02:	f042 0202 	orrlt.w	r2, r2, #2
 8005d06:	9307      	strge	r3, [sp, #28]
 8005d08:	9307      	strlt	r3, [sp, #28]
 8005d0a:	bfb8      	it	lt
 8005d0c:	9204      	strlt	r2, [sp, #16]
 8005d0e:	7823      	ldrb	r3, [r4, #0]
 8005d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d12:	d10a      	bne.n	8005d2a <_vfiprintf_r+0x156>
 8005d14:	7863      	ldrb	r3, [r4, #1]
 8005d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d18:	d132      	bne.n	8005d80 <_vfiprintf_r+0x1ac>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9203      	str	r2, [sp, #12]
 8005d22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d26:	3402      	adds	r4, #2
 8005d28:	9305      	str	r3, [sp, #20]
 8005d2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e00 <_vfiprintf_r+0x22c>
 8005d2e:	7821      	ldrb	r1, [r4, #0]
 8005d30:	2203      	movs	r2, #3
 8005d32:	4650      	mov	r0, sl
 8005d34:	f7fa fa64 	bl	8000200 <memchr>
 8005d38:	b138      	cbz	r0, 8005d4a <_vfiprintf_r+0x176>
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	eba0 000a 	sub.w	r0, r0, sl
 8005d40:	2240      	movs	r2, #64	@ 0x40
 8005d42:	4082      	lsls	r2, r0
 8005d44:	4313      	orrs	r3, r2
 8005d46:	3401      	adds	r4, #1
 8005d48:	9304      	str	r3, [sp, #16]
 8005d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4e:	4829      	ldr	r0, [pc, #164]	@ (8005df4 <_vfiprintf_r+0x220>)
 8005d50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d54:	2206      	movs	r2, #6
 8005d56:	f7fa fa53 	bl	8000200 <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d03f      	beq.n	8005dde <_vfiprintf_r+0x20a>
 8005d5e:	4b26      	ldr	r3, [pc, #152]	@ (8005df8 <_vfiprintf_r+0x224>)
 8005d60:	bb1b      	cbnz	r3, 8005daa <_vfiprintf_r+0x1d6>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	3307      	adds	r3, #7
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d70:	443b      	add	r3, r7
 8005d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d74:	e76a      	b.n	8005c4c <_vfiprintf_r+0x78>
 8005d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	e7a8      	b.n	8005cd2 <_vfiprintf_r+0xfe>
 8005d80:	2300      	movs	r3, #0
 8005d82:	3401      	adds	r4, #1
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	4619      	mov	r1, r3
 8005d88:	f04f 0c0a 	mov.w	ip, #10
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d92:	3a30      	subs	r2, #48	@ 0x30
 8005d94:	2a09      	cmp	r2, #9
 8005d96:	d903      	bls.n	8005da0 <_vfiprintf_r+0x1cc>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0c6      	beq.n	8005d2a <_vfiprintf_r+0x156>
 8005d9c:	9105      	str	r1, [sp, #20]
 8005d9e:	e7c4      	b.n	8005d2a <_vfiprintf_r+0x156>
 8005da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005da4:	4604      	mov	r4, r0
 8005da6:	2301      	movs	r3, #1
 8005da8:	e7f0      	b.n	8005d8c <_vfiprintf_r+0x1b8>
 8005daa:	ab03      	add	r3, sp, #12
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	462a      	mov	r2, r5
 8005db0:	4b12      	ldr	r3, [pc, #72]	@ (8005dfc <_vfiprintf_r+0x228>)
 8005db2:	a904      	add	r1, sp, #16
 8005db4:	4630      	mov	r0, r6
 8005db6:	f3af 8000 	nop.w
 8005dba:	4607      	mov	r7, r0
 8005dbc:	1c78      	adds	r0, r7, #1
 8005dbe:	d1d6      	bne.n	8005d6e <_vfiprintf_r+0x19a>
 8005dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dc2:	07d9      	lsls	r1, r3, #31
 8005dc4:	d405      	bmi.n	8005dd2 <_vfiprintf_r+0x1fe>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <_vfiprintf_r+0x1fe>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dce:	f7ff fddd 	bl	800598c <__retarget_lock_release_recursive>
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	065b      	lsls	r3, r3, #25
 8005dd6:	f53f af1f 	bmi.w	8005c18 <_vfiprintf_r+0x44>
 8005dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ddc:	e71e      	b.n	8005c1c <_vfiprintf_r+0x48>
 8005dde:	ab03      	add	r3, sp, #12
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	462a      	mov	r2, r5
 8005de4:	4b05      	ldr	r3, [pc, #20]	@ (8005dfc <_vfiprintf_r+0x228>)
 8005de6:	a904      	add	r1, sp, #16
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f879 	bl	8005ee0 <_printf_i>
 8005dee:	e7e4      	b.n	8005dba <_vfiprintf_r+0x1e6>
 8005df0:	080065b4 	.word	0x080065b4
 8005df4:	080065be 	.word	0x080065be
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	08005baf 	.word	0x08005baf
 8005e00:	080065ba 	.word	0x080065ba

08005e04 <_printf_common>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4616      	mov	r6, r2
 8005e0a:	4698      	mov	r8, r3
 8005e0c:	688a      	ldr	r2, [r1, #8]
 8005e0e:	690b      	ldr	r3, [r1, #16]
 8005e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	bfb8      	it	lt
 8005e18:	4613      	movlt	r3, r2
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e20:	4607      	mov	r7, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b10a      	cbz	r2, 8005e2a <_printf_common+0x26>
 8005e26:	3301      	adds	r3, #1
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	0699      	lsls	r1, r3, #26
 8005e2e:	bf42      	ittt	mi
 8005e30:	6833      	ldrmi	r3, [r6, #0]
 8005e32:	3302      	addmi	r3, #2
 8005e34:	6033      	strmi	r3, [r6, #0]
 8005e36:	6825      	ldr	r5, [r4, #0]
 8005e38:	f015 0506 	ands.w	r5, r5, #6
 8005e3c:	d106      	bne.n	8005e4c <_printf_common+0x48>
 8005e3e:	f104 0a19 	add.w	sl, r4, #25
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	42ab      	cmp	r3, r5
 8005e4a:	dc26      	bgt.n	8005e9a <_printf_common+0x96>
 8005e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e50:	6822      	ldr	r2, [r4, #0]
 8005e52:	3b00      	subs	r3, #0
 8005e54:	bf18      	it	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	0692      	lsls	r2, r2, #26
 8005e5a:	d42b      	bmi.n	8005eb4 <_printf_common+0xb0>
 8005e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e60:	4641      	mov	r1, r8
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c8      	blx	r9
 8005e66:	3001      	adds	r0, #1
 8005e68:	d01e      	beq.n	8005ea8 <_printf_common+0xa4>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	6922      	ldr	r2, [r4, #16]
 8005e6e:	f003 0306 	and.w	r3, r3, #6
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	bf02      	ittt	eq
 8005e76:	68e5      	ldreq	r5, [r4, #12]
 8005e78:	6833      	ldreq	r3, [r6, #0]
 8005e7a:	1aed      	subeq	r5, r5, r3
 8005e7c:	68a3      	ldr	r3, [r4, #8]
 8005e7e:	bf0c      	ite	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	2500      	movne	r5, #0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	bfc4      	itt	gt
 8005e8a:	1a9b      	subgt	r3, r3, r2
 8005e8c:	18ed      	addgt	r5, r5, r3
 8005e8e:	2600      	movs	r6, #0
 8005e90:	341a      	adds	r4, #26
 8005e92:	42b5      	cmp	r5, r6
 8005e94:	d11a      	bne.n	8005ecc <_printf_common+0xc8>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e008      	b.n	8005eac <_printf_common+0xa8>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4641      	mov	r1, r8
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	47c8      	blx	r9
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_printf_common+0xac>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	e7c6      	b.n	8005e42 <_printf_common+0x3e>
 8005eb4:	18e1      	adds	r1, r4, r3
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	2030      	movs	r0, #48	@ 0x30
 8005eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ebe:	4422      	add	r2, r4
 8005ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ec8:	3302      	adds	r3, #2
 8005eca:	e7c7      	b.n	8005e5c <_printf_common+0x58>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	47c8      	blx	r9
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d0e6      	beq.n	8005ea8 <_printf_common+0xa4>
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7d9      	b.n	8005e92 <_printf_common+0x8e>
	...

08005ee0 <_printf_i>:
 8005ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	7e0f      	ldrb	r7, [r1, #24]
 8005ee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ee8:	2f78      	cmp	r7, #120	@ 0x78
 8005eea:	4691      	mov	r9, r2
 8005eec:	4680      	mov	r8, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ef6:	d807      	bhi.n	8005f08 <_printf_i+0x28>
 8005ef8:	2f62      	cmp	r7, #98	@ 0x62
 8005efa:	d80a      	bhi.n	8005f12 <_printf_i+0x32>
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	f000 80d2 	beq.w	80060a6 <_printf_i+0x1c6>
 8005f02:	2f58      	cmp	r7, #88	@ 0x58
 8005f04:	f000 80b9 	beq.w	800607a <_printf_i+0x19a>
 8005f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f10:	e03a      	b.n	8005f88 <_printf_i+0xa8>
 8005f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f16:	2b15      	cmp	r3, #21
 8005f18:	d8f6      	bhi.n	8005f08 <_printf_i+0x28>
 8005f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005f20 <_printf_i+0x40>)
 8005f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f20:	08005f79 	.word	0x08005f79
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	08005f09 	.word	0x08005f09
 8005f2c:	08005f09 	.word	0x08005f09
 8005f30:	08005f09 	.word	0x08005f09
 8005f34:	08005f09 	.word	0x08005f09
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005f09 	.word	0x08005f09
 8005f40:	08005f09 	.word	0x08005f09
 8005f44:	08005f09 	.word	0x08005f09
 8005f48:	08005f09 	.word	0x08005f09
 8005f4c:	0800608d 	.word	0x0800608d
 8005f50:	08005fb7 	.word	0x08005fb7
 8005f54:	08006047 	.word	0x08006047
 8005f58:	08005f09 	.word	0x08005f09
 8005f5c:	08005f09 	.word	0x08005f09
 8005f60:	080060af 	.word	0x080060af
 8005f64:	08005f09 	.word	0x08005f09
 8005f68:	08005fb7 	.word	0x08005fb7
 8005f6c:	08005f09 	.word	0x08005f09
 8005f70:	08005f09 	.word	0x08005f09
 8005f74:	0800604f 	.word	0x0800604f
 8005f78:	6833      	ldr	r3, [r6, #0]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6032      	str	r2, [r6, #0]
 8005f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e09d      	b.n	80060c8 <_printf_i+0x1e8>
 8005f8c:	6833      	ldr	r3, [r6, #0]
 8005f8e:	6820      	ldr	r0, [r4, #0]
 8005f90:	1d19      	adds	r1, r3, #4
 8005f92:	6031      	str	r1, [r6, #0]
 8005f94:	0606      	lsls	r6, r0, #24
 8005f96:	d501      	bpl.n	8005f9c <_printf_i+0xbc>
 8005f98:	681d      	ldr	r5, [r3, #0]
 8005f9a:	e003      	b.n	8005fa4 <_printf_i+0xc4>
 8005f9c:	0645      	lsls	r5, r0, #25
 8005f9e:	d5fb      	bpl.n	8005f98 <_printf_i+0xb8>
 8005fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	da03      	bge.n	8005fb0 <_printf_i+0xd0>
 8005fa8:	232d      	movs	r3, #45	@ 0x2d
 8005faa:	426d      	negs	r5, r5
 8005fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb0:	4859      	ldr	r0, [pc, #356]	@ (8006118 <_printf_i+0x238>)
 8005fb2:	230a      	movs	r3, #10
 8005fb4:	e011      	b.n	8005fda <_printf_i+0xfa>
 8005fb6:	6821      	ldr	r1, [r4, #0]
 8005fb8:	6833      	ldr	r3, [r6, #0]
 8005fba:	0608      	lsls	r0, r1, #24
 8005fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fc0:	d402      	bmi.n	8005fc8 <_printf_i+0xe8>
 8005fc2:	0649      	lsls	r1, r1, #25
 8005fc4:	bf48      	it	mi
 8005fc6:	b2ad      	uxthmi	r5, r5
 8005fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fca:	4853      	ldr	r0, [pc, #332]	@ (8006118 <_printf_i+0x238>)
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	bf14      	ite	ne
 8005fd0:	230a      	movne	r3, #10
 8005fd2:	2308      	moveq	r3, #8
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fda:	6866      	ldr	r6, [r4, #4]
 8005fdc:	60a6      	str	r6, [r4, #8]
 8005fde:	2e00      	cmp	r6, #0
 8005fe0:	bfa2      	ittt	ge
 8005fe2:	6821      	ldrge	r1, [r4, #0]
 8005fe4:	f021 0104 	bicge.w	r1, r1, #4
 8005fe8:	6021      	strge	r1, [r4, #0]
 8005fea:	b90d      	cbnz	r5, 8005ff0 <_printf_i+0x110>
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	d04b      	beq.n	8006088 <_printf_i+0x1a8>
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ff6:	fb03 5711 	mls	r7, r3, r1, r5
 8005ffa:	5dc7      	ldrb	r7, [r0, r7]
 8005ffc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006000:	462f      	mov	r7, r5
 8006002:	42bb      	cmp	r3, r7
 8006004:	460d      	mov	r5, r1
 8006006:	d9f4      	bls.n	8005ff2 <_printf_i+0x112>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d10b      	bne.n	8006024 <_printf_i+0x144>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	07df      	lsls	r7, r3, #31
 8006010:	d508      	bpl.n	8006024 <_printf_i+0x144>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	6861      	ldr	r1, [r4, #4]
 8006016:	4299      	cmp	r1, r3
 8006018:	bfde      	ittt	le
 800601a:	2330      	movle	r3, #48	@ 0x30
 800601c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006020:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006024:	1b92      	subs	r2, r2, r6
 8006026:	6122      	str	r2, [r4, #16]
 8006028:	f8cd a000 	str.w	sl, [sp]
 800602c:	464b      	mov	r3, r9
 800602e:	aa03      	add	r2, sp, #12
 8006030:	4621      	mov	r1, r4
 8006032:	4640      	mov	r0, r8
 8006034:	f7ff fee6 	bl	8005e04 <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	d14a      	bne.n	80060d2 <_printf_i+0x1f2>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	b004      	add	sp, #16
 8006042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f043 0320 	orr.w	r3, r3, #32
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	4833      	ldr	r0, [pc, #204]	@ (800611c <_printf_i+0x23c>)
 8006050:	2778      	movs	r7, #120	@ 0x78
 8006052:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	6831      	ldr	r1, [r6, #0]
 800605a:	061f      	lsls	r7, r3, #24
 800605c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006060:	d402      	bmi.n	8006068 <_printf_i+0x188>
 8006062:	065f      	lsls	r7, r3, #25
 8006064:	bf48      	it	mi
 8006066:	b2ad      	uxthmi	r5, r5
 8006068:	6031      	str	r1, [r6, #0]
 800606a:	07d9      	lsls	r1, r3, #31
 800606c:	bf44      	itt	mi
 800606e:	f043 0320 	orrmi.w	r3, r3, #32
 8006072:	6023      	strmi	r3, [r4, #0]
 8006074:	b11d      	cbz	r5, 800607e <_printf_i+0x19e>
 8006076:	2310      	movs	r3, #16
 8006078:	e7ac      	b.n	8005fd4 <_printf_i+0xf4>
 800607a:	4827      	ldr	r0, [pc, #156]	@ (8006118 <_printf_i+0x238>)
 800607c:	e7e9      	b.n	8006052 <_printf_i+0x172>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	f023 0320 	bic.w	r3, r3, #32
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	e7f6      	b.n	8006076 <_printf_i+0x196>
 8006088:	4616      	mov	r6, r2
 800608a:	e7bd      	b.n	8006008 <_printf_i+0x128>
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	6825      	ldr	r5, [r4, #0]
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	1d18      	adds	r0, r3, #4
 8006094:	6030      	str	r0, [r6, #0]
 8006096:	062e      	lsls	r6, r5, #24
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	d501      	bpl.n	80060a0 <_printf_i+0x1c0>
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	e002      	b.n	80060a6 <_printf_i+0x1c6>
 80060a0:	0668      	lsls	r0, r5, #25
 80060a2:	d5fb      	bpl.n	800609c <_printf_i+0x1bc>
 80060a4:	8019      	strh	r1, [r3, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	4616      	mov	r6, r2
 80060ac:	e7bc      	b.n	8006028 <_printf_i+0x148>
 80060ae:	6833      	ldr	r3, [r6, #0]
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	6032      	str	r2, [r6, #0]
 80060b4:	681e      	ldr	r6, [r3, #0]
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7fa f8a0 	bl	8000200 <memchr>
 80060c0:	b108      	cbz	r0, 80060c6 <_printf_i+0x1e6>
 80060c2:	1b80      	subs	r0, r0, r6
 80060c4:	6060      	str	r0, [r4, #4]
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	2300      	movs	r3, #0
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060d0:	e7aa      	b.n	8006028 <_printf_i+0x148>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	4632      	mov	r2, r6
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d0ad      	beq.n	800603c <_printf_i+0x15c>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	d413      	bmi.n	800610e <_printf_i+0x22e>
 80060e6:	68e0      	ldr	r0, [r4, #12]
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	4298      	cmp	r0, r3
 80060ec:	bfb8      	it	lt
 80060ee:	4618      	movlt	r0, r3
 80060f0:	e7a6      	b.n	8006040 <_printf_i+0x160>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4632      	mov	r2, r6
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	47d0      	blx	sl
 80060fc:	3001      	adds	r0, #1
 80060fe:	d09d      	beq.n	800603c <_printf_i+0x15c>
 8006100:	3501      	adds	r5, #1
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	9903      	ldr	r1, [sp, #12]
 8006106:	1a5b      	subs	r3, r3, r1
 8006108:	42ab      	cmp	r3, r5
 800610a:	dcf2      	bgt.n	80060f2 <_printf_i+0x212>
 800610c:	e7eb      	b.n	80060e6 <_printf_i+0x206>
 800610e:	2500      	movs	r5, #0
 8006110:	f104 0619 	add.w	r6, r4, #25
 8006114:	e7f5      	b.n	8006102 <_printf_i+0x222>
 8006116:	bf00      	nop
 8006118:	080065c5 	.word	0x080065c5
 800611c:	080065d6 	.word	0x080065d6

08006120 <__sflush_r>:
 8006120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	0716      	lsls	r6, r2, #28
 800612a:	4605      	mov	r5, r0
 800612c:	460c      	mov	r4, r1
 800612e:	d454      	bmi.n	80061da <__sflush_r+0xba>
 8006130:	684b      	ldr	r3, [r1, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	dc02      	bgt.n	800613c <__sflush_r+0x1c>
 8006136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	dd48      	ble.n	80061ce <__sflush_r+0xae>
 800613c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800613e:	2e00      	cmp	r6, #0
 8006140:	d045      	beq.n	80061ce <__sflush_r+0xae>
 8006142:	2300      	movs	r3, #0
 8006144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006148:	682f      	ldr	r7, [r5, #0]
 800614a:	6a21      	ldr	r1, [r4, #32]
 800614c:	602b      	str	r3, [r5, #0]
 800614e:	d030      	beq.n	80061b2 <__sflush_r+0x92>
 8006150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	0759      	lsls	r1, r3, #29
 8006156:	d505      	bpl.n	8006164 <__sflush_r+0x44>
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800615e:	b10b      	cbz	r3, 8006164 <__sflush_r+0x44>
 8006160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006168:	6a21      	ldr	r1, [r4, #32]
 800616a:	4628      	mov	r0, r5
 800616c:	47b0      	blx	r6
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	d106      	bne.n	8006182 <__sflush_r+0x62>
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	291d      	cmp	r1, #29
 8006178:	d82b      	bhi.n	80061d2 <__sflush_r+0xb2>
 800617a:	4a2a      	ldr	r2, [pc, #168]	@ (8006224 <__sflush_r+0x104>)
 800617c:	410a      	asrs	r2, r1
 800617e:	07d6      	lsls	r6, r2, #31
 8006180:	d427      	bmi.n	80061d2 <__sflush_r+0xb2>
 8006182:	2200      	movs	r2, #0
 8006184:	6062      	str	r2, [r4, #4]
 8006186:	04d9      	lsls	r1, r3, #19
 8006188:	6922      	ldr	r2, [r4, #16]
 800618a:	6022      	str	r2, [r4, #0]
 800618c:	d504      	bpl.n	8006198 <__sflush_r+0x78>
 800618e:	1c42      	adds	r2, r0, #1
 8006190:	d101      	bne.n	8006196 <__sflush_r+0x76>
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	b903      	cbnz	r3, 8006198 <__sflush_r+0x78>
 8006196:	6560      	str	r0, [r4, #84]	@ 0x54
 8006198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800619a:	602f      	str	r7, [r5, #0]
 800619c:	b1b9      	cbz	r1, 80061ce <__sflush_r+0xae>
 800619e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061a2:	4299      	cmp	r1, r3
 80061a4:	d002      	beq.n	80061ac <__sflush_r+0x8c>
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7ff fbf2 	bl	8005990 <_free_r>
 80061ac:	2300      	movs	r3, #0
 80061ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80061b0:	e00d      	b.n	80061ce <__sflush_r+0xae>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b0      	blx	r6
 80061b8:	4602      	mov	r2, r0
 80061ba:	1c50      	adds	r0, r2, #1
 80061bc:	d1c9      	bne.n	8006152 <__sflush_r+0x32>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0c6      	beq.n	8006152 <__sflush_r+0x32>
 80061c4:	2b1d      	cmp	r3, #29
 80061c6:	d001      	beq.n	80061cc <__sflush_r+0xac>
 80061c8:	2b16      	cmp	r3, #22
 80061ca:	d11e      	bne.n	800620a <__sflush_r+0xea>
 80061cc:	602f      	str	r7, [r5, #0]
 80061ce:	2000      	movs	r0, #0
 80061d0:	e022      	b.n	8006218 <__sflush_r+0xf8>
 80061d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061d6:	b21b      	sxth	r3, r3
 80061d8:	e01b      	b.n	8006212 <__sflush_r+0xf2>
 80061da:	690f      	ldr	r7, [r1, #16]
 80061dc:	2f00      	cmp	r7, #0
 80061de:	d0f6      	beq.n	80061ce <__sflush_r+0xae>
 80061e0:	0793      	lsls	r3, r2, #30
 80061e2:	680e      	ldr	r6, [r1, #0]
 80061e4:	bf08      	it	eq
 80061e6:	694b      	ldreq	r3, [r1, #20]
 80061e8:	600f      	str	r7, [r1, #0]
 80061ea:	bf18      	it	ne
 80061ec:	2300      	movne	r3, #0
 80061ee:	eba6 0807 	sub.w	r8, r6, r7
 80061f2:	608b      	str	r3, [r1, #8]
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	dde9      	ble.n	80061ce <__sflush_r+0xae>
 80061fa:	6a21      	ldr	r1, [r4, #32]
 80061fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061fe:	4643      	mov	r3, r8
 8006200:	463a      	mov	r2, r7
 8006202:	4628      	mov	r0, r5
 8006204:	47b0      	blx	r6
 8006206:	2800      	cmp	r0, #0
 8006208:	dc08      	bgt.n	800621c <__sflush_r+0xfc>
 800620a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	4407      	add	r7, r0
 800621e:	eba8 0800 	sub.w	r8, r8, r0
 8006222:	e7e7      	b.n	80061f4 <__sflush_r+0xd4>
 8006224:	dfbffffe 	.word	0xdfbffffe

08006228 <_fflush_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	690b      	ldr	r3, [r1, #16]
 800622c:	4605      	mov	r5, r0
 800622e:	460c      	mov	r4, r1
 8006230:	b913      	cbnz	r3, 8006238 <_fflush_r+0x10>
 8006232:	2500      	movs	r5, #0
 8006234:	4628      	mov	r0, r5
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	b118      	cbz	r0, 8006242 <_fflush_r+0x1a>
 800623a:	6a03      	ldr	r3, [r0, #32]
 800623c:	b90b      	cbnz	r3, 8006242 <_fflush_r+0x1a>
 800623e:	f7ff fa9f 	bl	8005780 <__sinit>
 8006242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f3      	beq.n	8006232 <_fflush_r+0xa>
 800624a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800624c:	07d0      	lsls	r0, r2, #31
 800624e:	d404      	bmi.n	800625a <_fflush_r+0x32>
 8006250:	0599      	lsls	r1, r3, #22
 8006252:	d402      	bmi.n	800625a <_fflush_r+0x32>
 8006254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006256:	f7ff fb98 	bl	800598a <__retarget_lock_acquire_recursive>
 800625a:	4628      	mov	r0, r5
 800625c:	4621      	mov	r1, r4
 800625e:	f7ff ff5f 	bl	8006120 <__sflush_r>
 8006262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006264:	07da      	lsls	r2, r3, #31
 8006266:	4605      	mov	r5, r0
 8006268:	d4e4      	bmi.n	8006234 <_fflush_r+0xc>
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	059b      	lsls	r3, r3, #22
 800626e:	d4e1      	bmi.n	8006234 <_fflush_r+0xc>
 8006270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006272:	f7ff fb8b 	bl	800598c <__retarget_lock_release_recursive>
 8006276:	e7dd      	b.n	8006234 <_fflush_r+0xc>

08006278 <__swbuf_r>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	460e      	mov	r6, r1
 800627c:	4614      	mov	r4, r2
 800627e:	4605      	mov	r5, r0
 8006280:	b118      	cbz	r0, 800628a <__swbuf_r+0x12>
 8006282:	6a03      	ldr	r3, [r0, #32]
 8006284:	b90b      	cbnz	r3, 800628a <__swbuf_r+0x12>
 8006286:	f7ff fa7b 	bl	8005780 <__sinit>
 800628a:	69a3      	ldr	r3, [r4, #24]
 800628c:	60a3      	str	r3, [r4, #8]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	071a      	lsls	r2, r3, #28
 8006292:	d501      	bpl.n	8006298 <__swbuf_r+0x20>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	b943      	cbnz	r3, 80062aa <__swbuf_r+0x32>
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f82a 	bl	80062f4 <__swsetup_r>
 80062a0:	b118      	cbz	r0, 80062aa <__swbuf_r+0x32>
 80062a2:	f04f 37ff 	mov.w	r7, #4294967295
 80062a6:	4638      	mov	r0, r7
 80062a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	6922      	ldr	r2, [r4, #16]
 80062ae:	1a98      	subs	r0, r3, r2
 80062b0:	6963      	ldr	r3, [r4, #20]
 80062b2:	b2f6      	uxtb	r6, r6
 80062b4:	4283      	cmp	r3, r0
 80062b6:	4637      	mov	r7, r6
 80062b8:	dc05      	bgt.n	80062c6 <__swbuf_r+0x4e>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	f7ff ffb3 	bl	8006228 <_fflush_r>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d1ed      	bne.n	80062a2 <__swbuf_r+0x2a>
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	60a3      	str	r3, [r4, #8]
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	701e      	strb	r6, [r3, #0]
 80062d4:	6962      	ldr	r2, [r4, #20]
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	429a      	cmp	r2, r3
 80062da:	d004      	beq.n	80062e6 <__swbuf_r+0x6e>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	07db      	lsls	r3, r3, #31
 80062e0:	d5e1      	bpl.n	80062a6 <__swbuf_r+0x2e>
 80062e2:	2e0a      	cmp	r6, #10
 80062e4:	d1df      	bne.n	80062a6 <__swbuf_r+0x2e>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff ff9d 	bl	8006228 <_fflush_r>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d0d9      	beq.n	80062a6 <__swbuf_r+0x2e>
 80062f2:	e7d6      	b.n	80062a2 <__swbuf_r+0x2a>

080062f4 <__swsetup_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4b29      	ldr	r3, [pc, #164]	@ (800639c <__swsetup_r+0xa8>)
 80062f8:	4605      	mov	r5, r0
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	460c      	mov	r4, r1
 80062fe:	b118      	cbz	r0, 8006308 <__swsetup_r+0x14>
 8006300:	6a03      	ldr	r3, [r0, #32]
 8006302:	b90b      	cbnz	r3, 8006308 <__swsetup_r+0x14>
 8006304:	f7ff fa3c 	bl	8005780 <__sinit>
 8006308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630c:	0719      	lsls	r1, r3, #28
 800630e:	d422      	bmi.n	8006356 <__swsetup_r+0x62>
 8006310:	06da      	lsls	r2, r3, #27
 8006312:	d407      	bmi.n	8006324 <__swsetup_r+0x30>
 8006314:	2209      	movs	r2, #9
 8006316:	602a      	str	r2, [r5, #0]
 8006318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800631c:	81a3      	strh	r3, [r4, #12]
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	e033      	b.n	800638c <__swsetup_r+0x98>
 8006324:	0758      	lsls	r0, r3, #29
 8006326:	d512      	bpl.n	800634e <__swsetup_r+0x5a>
 8006328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800632a:	b141      	cbz	r1, 800633e <__swsetup_r+0x4a>
 800632c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006330:	4299      	cmp	r1, r3
 8006332:	d002      	beq.n	800633a <__swsetup_r+0x46>
 8006334:	4628      	mov	r0, r5
 8006336:	f7ff fb2b 	bl	8005990 <_free_r>
 800633a:	2300      	movs	r3, #0
 800633c:	6363      	str	r3, [r4, #52]	@ 0x34
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	2300      	movs	r3, #0
 8006348:	6063      	str	r3, [r4, #4]
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f043 0308 	orr.w	r3, r3, #8
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	b94b      	cbnz	r3, 800636e <__swsetup_r+0x7a>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006364:	d003      	beq.n	800636e <__swsetup_r+0x7a>
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f000 f84f 	bl	800640c <__smakebuf_r>
 800636e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006372:	f013 0201 	ands.w	r2, r3, #1
 8006376:	d00a      	beq.n	800638e <__swsetup_r+0x9a>
 8006378:	2200      	movs	r2, #0
 800637a:	60a2      	str	r2, [r4, #8]
 800637c:	6962      	ldr	r2, [r4, #20]
 800637e:	4252      	negs	r2, r2
 8006380:	61a2      	str	r2, [r4, #24]
 8006382:	6922      	ldr	r2, [r4, #16]
 8006384:	b942      	cbnz	r2, 8006398 <__swsetup_r+0xa4>
 8006386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800638a:	d1c5      	bne.n	8006318 <__swsetup_r+0x24>
 800638c:	bd38      	pop	{r3, r4, r5, pc}
 800638e:	0799      	lsls	r1, r3, #30
 8006390:	bf58      	it	pl
 8006392:	6962      	ldrpl	r2, [r4, #20]
 8006394:	60a2      	str	r2, [r4, #8]
 8006396:	e7f4      	b.n	8006382 <__swsetup_r+0x8e>
 8006398:	2000      	movs	r0, #0
 800639a:	e7f7      	b.n	800638c <__swsetup_r+0x98>
 800639c:	20040018 	.word	0x20040018

080063a0 <_sbrk_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	@ (80063bc <_sbrk_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fa ff5a 	bl	8001264 <_sbrk>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_sbrk_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_sbrk_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20040300 	.word	0x20040300

080063c0 <__swhatbuf_r>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	2900      	cmp	r1, #0
 80063ca:	b096      	sub	sp, #88	@ 0x58
 80063cc:	4615      	mov	r5, r2
 80063ce:	461e      	mov	r6, r3
 80063d0:	da0d      	bge.n	80063ee <__swhatbuf_r+0x2e>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	bf14      	ite	ne
 80063de:	2340      	movne	r3, #64	@ 0x40
 80063e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063e4:	2000      	movs	r0, #0
 80063e6:	6031      	str	r1, [r6, #0]
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	b016      	add	sp, #88	@ 0x58
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	466a      	mov	r2, sp
 80063f0:	f000 f848 	bl	8006484 <_fstat_r>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	dbec      	blt.n	80063d2 <__swhatbuf_r+0x12>
 80063f8:	9901      	ldr	r1, [sp, #4]
 80063fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006402:	4259      	negs	r1, r3
 8006404:	4159      	adcs	r1, r3
 8006406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800640a:	e7eb      	b.n	80063e4 <__swhatbuf_r+0x24>

0800640c <__smakebuf_r>:
 800640c:	898b      	ldrh	r3, [r1, #12]
 800640e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006410:	079d      	lsls	r5, r3, #30
 8006412:	4606      	mov	r6, r0
 8006414:	460c      	mov	r4, r1
 8006416:	d507      	bpl.n	8006428 <__smakebuf_r+0x1c>
 8006418:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	2301      	movs	r3, #1
 8006422:	6163      	str	r3, [r4, #20]
 8006424:	b003      	add	sp, #12
 8006426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006428:	ab01      	add	r3, sp, #4
 800642a:	466a      	mov	r2, sp
 800642c:	f7ff ffc8 	bl	80063c0 <__swhatbuf_r>
 8006430:	9f00      	ldr	r7, [sp, #0]
 8006432:	4605      	mov	r5, r0
 8006434:	4639      	mov	r1, r7
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff fb16 	bl	8005a68 <_malloc_r>
 800643c:	b948      	cbnz	r0, 8006452 <__smakebuf_r+0x46>
 800643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006442:	059a      	lsls	r2, r3, #22
 8006444:	d4ee      	bmi.n	8006424 <__smakebuf_r+0x18>
 8006446:	f023 0303 	bic.w	r3, r3, #3
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	e7e2      	b.n	8006418 <__smakebuf_r+0xc>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	6020      	str	r0, [r4, #0]
 8006456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006462:	b15b      	cbz	r3, 800647c <__smakebuf_r+0x70>
 8006464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006468:	4630      	mov	r0, r6
 800646a:	f000 f81d 	bl	80064a8 <_isatty_r>
 800646e:	b128      	cbz	r0, 800647c <__smakebuf_r+0x70>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	431d      	orrs	r5, r3
 8006480:	81a5      	strh	r5, [r4, #12]
 8006482:	e7cf      	b.n	8006424 <__smakebuf_r+0x18>

08006484 <_fstat_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	@ (80064a4 <_fstat_r+0x20>)
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	f7fa febf 	bl	8001214 <_fstat>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d102      	bne.n	80064a0 <_fstat_r+0x1c>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	b103      	cbz	r3, 80064a0 <_fstat_r+0x1c>
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	20040300 	.word	0x20040300

080064a8 <_isatty_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d06      	ldr	r5, [pc, #24]	@ (80064c4 <_isatty_r+0x1c>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	f7fa febe 	bl	8001234 <_isatty>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_isatty_r+0x1a>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_isatty_r+0x1a>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	20040300 	.word	0x20040300

080064c8 <_init>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr

080064d4 <_fini>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr
